Class MVP.EG.Facets.ClinicalLabResults.Process Extends Ens.BusinessProcess [ ClassType = persistent, StorageStrategy = "" ]
{

Property TargetConfigName As Ens.DataType.ConfigName [ InitialExpression = "HS.Gateway.SDA3.InboundProcess" ];

Property ControlID As %Integer;

Property ForceEligibilityAndMemberLoadForTest As %Boolean;

Parameter SETTINGS = "TargetConfigName,ForceEligibilityAndMemberLoadForTest";

Method OnRequest(
	pRequest As MVP.EG.Load.Request,
	Output pResponse As Ens.Response) As %Status
{
	#dim tSC As %Status = $$$OK
	#dim e As %Exception.AbstractException
	#dim tStagedRecords As %SQL.StatementResult
	
	set tSC = $$$OK
	Try {

		#dim tCONTROLDATE As %String = pRequest.ControlID
		#dim tMEMECK As %String = $P(pRequest.DistinctValues, ",", 1)
		#dim tLABTESTPANELCODE As %String = $P(pRequest.DistinctValues, ",", 2)

		$$$TRACE("START:  CREATE SDA Container => MEMECK="_ tMEMECK _ " | LABTESTPANELCODE=" _ tLABTESTPANELCODE)
		//Write !, "START:  CREATE SDA Container => MEMECK=", tMEMECK _ " | LABTESTPANELCODE=" _ tLABTESTPANELCODE, !

	  	// If we are in test mode, we need to go load the coverage and member for the current MEME_CK since we can't assume it's already in HS
	  	if (..ForceEligibilityAndMemberLoadForTest)
	  	{		  	
	  		$$$THROWONERROR(tSC,..LoadMemberAndEligbilty(tMEMECK))			
	  	}	

		// Create SDA Container
       	set tContainer=##class(HS.SDA3.Container).%New()

		// Add Patient Data to SDA Container
		set tPatient=##class(HS.SDA3.Patient).%New()
		set tPatMRN=##class(HS.SDA3.PatientNumber).%New()
		set tPatMRN.Number=tMEMECK
		set tPatMRN.NumberType="MRN"
		set tPatMRN.Organization.Code="MVP"
		set tPatMRN.ISOAssigningAuthority="MVP"
		DO tPatient.PatientNumbers.Insert(tPatMRN)

		// Intialize New Instance of Lab Order,  Add Test Results and theen add Lab Order to SDA3 Container
		set tLabOrder = ##class(HS.SDA3.LabOrder).%New()
		set tSC = ..AddLabTestResultDataToSDA(pRequest,.tContainer,.tPatient,.tLabOrder)	
		set tContainer.Patient=tPatient
		set tContainer.SendingFacility="MVP"	
		do tContainer.LabOrders.Insert(tLabOrder)
		$$$ThrowOnError(tSC)

		set tQuickStream = ##class(%GlobalCharacterStream).%New()			
		$$$THROWONERROR(tSC,tContainer.ToQuickXMLStream(.tQuickStream))
		
		// Demographics is added through Member View (. This data already comes from the Member SQL View
		set tRequest=##class(HS.Message.ECRUpdateRequest).%New()
			
		$$$THROWONERROR(tSC, tRequest.ContentStream.CopyFrom(tQuickStream))		
		$$$THROWONERROR(tSC, ..SendRequestSync(..TargetConfigName,tRequest,.tResponse))
		do tQuickStream.Clear(1)

		$$$TRACE("END:  SEND SDA Container Complete => HS.Gateway.SDA3.InboundProcess:  MEMECK: " _ " - " _ tMEMECK _ " - LABTESTPANELCODE: " _ tLABTESTPANELCODE)
		//Write !, "END:  SEND SDA Container Complete => HS.Gateway.SDA3.InboundProcess", !
	} 
	catch e 
	{
		s tSC = e.AsStatus()
		$$$LOGINFO(tSC)
	}

	#dim tAuditSC = ##class(MVP.EG.Load.Audit).Update(pRequest.ControlID,..%SessionId,tSC)

	Quit tSC
}

Method LoadMemberAndEligbilty(pMemeCK As %String)
{
	#dim tSC As %Status = $$$OK
	#dim e As %Exception.AbstractException
	
	Try {		
	  	set tControlIDStatement = ##class(%SQL.Statement).%New()	  			  	
		$$$THROWONERROR(tSC, tControlIDStatement.%PrepareClassQuery("MVP.EG.Facets.Eligibility.Process","GetEligibilityControlIDForMemeCK"))								
	  	#dim tControlResultSet=tControlIDStatement.%Execute(pMemeCK)			  		  	
        
        if tControlResultSet.%SQLCODE = 0 {
                        
            While tControlResultSet.%Next()	 
            {
	            set tEligibilityRequest=##class(MVP.EG.Load.Request).%New()
 				set tEligibilityRequest.ControlID = tControlResultSet.%Get("ID")							
 				set tEligibilityRequest.DistinctValueFields = "MEME_CK"
 				set tEligibilityRequest.DistinctValues = pMemeCK
				$$$THROWONERROR(tSC, ..SendRequestSync("Facets.Eligibility.Process",tEligibilityRequest,.tResponse))				  	
            }			            
        } 														  	
	} 
	catch e 
	{
		s tSC = e.AsStatus()	
	}	
	Quit tSC
}

/*
	Add Lab Test Results to Lab Order and then Update SDA
*/
Method AddLabTestResultDataToSDA(
	pRequest As MVP.EG.Load.Request,
	ByRef tContainer As HS.SDA3.Container,
	ByRef tPatient As HS.SDA3.PatientNumber,
	ByRef tLabOrder As HS.SDA3.LabOrder) As %Status
{
	#dim tSC As %Status = $$$OK
	#dim e As %Exception.AbstractException
	#dim resultset As %SQL.StatementResult
	try 
	{  		
		Set tSC = ..GetStagedRecords(pRequest,.resultset)
		$$$ThrowOnError(tSC)
		
	  	#dim actionCode as %String
	  	#dim bValidateLabOrderHeader as %Boolean = 0
		#dim nLabTestResultCounter as %Integer = 0
		
		While resultset.%Next() 
		{
			#dim MEMECK As %String = $ZSTRIP(resultset."MEME_CK","<>WC")
			#dim MEMBERID As %String = $ZSTRIP(resultset."MEMBER_ID","<>WC")
			#dim DATEOFSERVICE As %String = $ZSTRIP($ZSTRIP(resultset."DATE_OF_SERVICE","<>WC"), "*P")
			#dim LABTESTPANELCODE As %String = $ZSTRIP(resultset."LAB_TEST_PANEL_CODE","<>WC")

			#dim fakeDate As %String = "2021-01-01T13:15:00"

			//Implement record to SDA mapping here			
			if bValidateLabOrderHeader = 0 
			{
				set tPatMB=##class(HS.SDA3.PatientNumber).%New()
				set tPatMB.Number=MEMBERID
				set tPatMB.NumberType="MB"
				set tPatMB.Organization.Code="MVP"
				set tPatMB.ISOAssigningAuthority="MVP"
				DO tPatient.PatientNumbers.Insert(tPatMB)            	

				// Validate if LAB TEST PANEL CODE is empty and set LAB ORDER Unqiue ID
				// $ZSTRIP({field}, "*", "-") | $ZSTRIP({field}, "*P") 
				if LABTESTPANELCODE '= "" {
					//set tLabOrder.FillerId = MEMECK _ DATEOFSERVICE _ $ZSTRIP(LABTESTPANELCODE, "*P") 
					set tLabOrder.PlacerId = MEMECK _ DATEOFSERVICE _ $ZSTRIP(LABTESTPANELCODE, "*P") 
					set tLabOrder.ExternalId = MEMECK _ DATEOFSERVICE _ $ZSTRIP(LABTESTPANELCODE, "*P") 
				}
				else {
					
					//set tLabOrder.FillerId = MEMECK _ DATEOFSERVICE 
					set tLabOrder.PlacerId = MEMECK _ DATEOFSERVICE 
					set tLabOrder.ExternalId = MEMECK _ DATEOFSERVICE 
				}

				set DATEOFSERVICE = ##class(HS.Gateway.HL7.HL7ToSDA3).xmltimestamp(DATEOFSERVICE)

				set tLabOrder.AuthorizationTime = DATEOFSERVICE  //$ZTIME(DATEOFSERVICE,1)
			  	set tLabOrder.EnteringOrganization.Code=$ZSTRIP(resultset."LAB_DATA_SOURCE_CODE","<>W")
			  	set tLabOrder.EnteringOrganization.Description=$ZSTRIP(resultset.SOURCE,"<>W")
			  	set tLabOrder.EnteredAt.Code=$ZSTRIP(resultset."VENDOR_LAB_CODE","<>WC")
			  	set tLabOrder.EnteredAt.Description=$ZSTRIP(resultset."SOURCE","<>WC")
				set tLabOrder.EnteredBy.Code =$ZSTRIP(resultset."VENDOR_LAB_CODE","<>WC")
				set tLabOrder.EnteredBy.Description = $ZSTRIP(resultset.SOURCE,"<>W")

				set tLabOrder.EnteredOn = DATEOFSERVICE  //$ZTIME(DATEOFSERVICE,1)
		  		set tLabOrder.FromTime = DATEOFSERVICE  //$ZTIME(DATEOFSERVICE,1)
				
				// set tLabOrder.EncounterNumber = $ZSTRIP(resultset."PATIENT_ACCOUNT_NBR","<>W")
				
				set tLabOrder.FillerAssigningAuthority = $ZSTRIP(resultset.SOURCE,"<>W")
				
		  		set tLabOrder.OrderCategory.Code = $ZSTRIP(resultset."LAB_TEST_PANEL_CODE","<>WC")
		  		set tLabOrder.OrderCategory.Description = $ZSTRIP(resultset."LAB_TEST_PANEL_NAME","<>WC")
				
				set tLabOrder.OrderItem.Code = $ZSTRIP(resultset."LAB_TEST_CODE","<>WC")
				set tLabOrder.OrderItem.SDACodingStandard = $ZSTRIP(resultset.SOURCE,"<>W") _ "-LAB"
				if $ZSTRIP(resultset."LAB_TEST_PANEL_CODE","<>WC")'="" {
					set tLabOrder.OrderItem.Description = $ZSTRIP(resultset."LAB_TEST_PANEL_NAME","<>WC") _ ":   " _ $ZSTRIP(resultset."DATE_OF_SERVICE","<>WC")
				}
				else {
					set tLabOrder.OrderItem.Description = $ZSTRIP(resultset."SOURCE","<>WC") _ ":   " _ $ZSTRIP(resultset."DATE_OF_SERVICE","<>WC")
				}

			  	set tLabOrder.OrderedBy.Code = $ZSTRIP(resultset."ORDERING_ACCOUNT","<>WC")
			  	set tLabOrder.OrderedBy.Description = $ZSTRIP(resultset."ORDERINGACCOUNTNAME","<>WC")
			  	set tLabOrder.OrderedBy.Name.FamilyName = $ZSTRIP(resultset."REFERRING_PROV_NAME","<>WC")
			  	set tLabOrder.OrderedBy.Name.GivenName = $ZSTRIP(resultset."REFERRING_PROV_NAME","<>WC")
			  	
				set tLabOrder.OrderGroup = $ZSTRIP(resultset."PRODUCT_ID","<>WC")

				set tLabOrder.Priority.Code = "NORM"
				set tLabOrder.Specimen=$ZSTRIP(resultset."SPECIMEN_ID","<>WC")
				set tLabOrder.Status = "E"
		  		set tLabOrder.ToTime = DATEOFSERVICE  //$ZTIME(DATEOFSERVICE,1)
				
				set bValidateLabOrderHeader = 1  
			}

			#DIM DATETIMEOFSERVICE = ##class(HS.Gateway.HL7.HL7ToSDA3).xmltimestamp(DATEOFSERVICE)


			set tLabOrder.Result.FromTime = DATETIMEOFSERVICE
			set tLabOrder.Result.ToTime = DATETIMEOFSERVICE
			Set tLabOrder.Result.ResultTime = DATETIMEOFSERVICE
			set tLabOrder.Result.ResultStatus = "F"  // Final
			set tLabOrder.Result.ResultType = "AT"   // Atomic

			// Intialize New Instance of Lab Result Item
			set tLabResultItem = ##class(HS.SDA3.LabResultItem).%New()

			if $ZSTRIP(resultset."LAB_TEST_RESULT_VALUE","<>WC")'="", $ZSTRIP(resultset."LAB_TEST_RESULT_VALUE","<>WC")'="0", $ZSTRIP(resultset."LAB_TEST_RESULT_VALUE","<>WC")>0 {
				set tLabResultItem.ResultValue = $ZSTRIP(resultset."LAB_TEST_RESULT_VALUE","<>WC")
			}
			else {
				set tLabResultItem.ResultValue = $ZSTRIP(resultset."LAB_TEST_RESULT_TEXT_VALUE","<>WC")
			}
			set tLabResultItem.ResultValueUnits = $ZSTRIP(resultset."LAB_TEST_RESULT_VALUE_UOM","<>WC") 

			#dim ResultNormalRange As %String
			do ..CalcResultNormalRange($ZSTRIP(resultset."REF_RANGE_LOW_VALUE","<>WC"), 
									   $ZSTRIP(resultset."REF_RANGE_HIGH_VALUE","<>WC"), 
									   $ZSTRIP(resultset."REF_RANGE_DESC","<>WC"), 
									   .ResultNormalRange)
			set tLabResultItem.ResultNormalRange = ResultNormalRange

			set tLabResultItem.ResultCodedValue.Code = $ZSTRIP(resultset."LAB_TEST_CODE","<>WC")
			set tLabResultItem.ResultCodedValue.Code = $ZSTRIP(resultset."PROCEDURE_CODE","<>WC")
			
			if $ZSTRIP(resultset."RESULT_NAME","<>WC")'="" {
				set tLabResultItem.ResultCodedValue.Description = $ZSTRIP(resultset."RESULT_NAME","<>WC")
			}
			else {
				set tLabResultItem.ResultCodedValue.Description = $ZSTRIP(resultset."LAB_TEST_DESC","<>WC")			
			}

			set tLabResultItem.ResultInterpretation = $ZSTRIP(resultset."ABNORMAL_LAB_TEST_RESULT_CODE","<>WC")
			//if $ZSTRIP(resultset."ABNORMAL_LAB_TEST_RESULT_CODE","<>WC")'="N", $ZSTRIP(resultset."ABNORMAL_LAB_TEST_RESULT_CODE","<>WC")'="" {
			//	set tLabResultItem.ResultInterpretation = $ZSTRIP(resultset."ABNORMAL_LAB_TEST_RESULT_CODE","<>WC")
			//}
			
			if $ZSTRIP(resultset."PRINCIPAL_DIAG_CODE","<>WC")'=""
			{			
				#DIM strDiagnosis As %String
				Set:$ZSTRIP(resultset."PRINCIPAL_DIAG_CODE","<>WC")'="" strDiagnosis="Principal Diagnosis Code: " _ $ZSTRIP(resultset."PRINCIPAL_DIAG_CODE","<>WC")
				Set:$ZSTRIP(resultset."SECONDARY_DIAG_01_CODE","<>WC")'="" strDiagnosis=" | Secondary Diagnosis Code 01: " _ $ZSTRIP(resultset."SECONDARY_DIAG_01_CODE","<>WC")
				Set:$ZSTRIP(resultset."SECONDARY_DIAG_02_CODE","<>WC")'="" strDiagnosis=" | Secondary Diagnosis Code 02: " _ $ZSTRIP(resultset."SECONDARY_DIAG_02_CODE","<>WC")
				Set:$ZSTRIP(resultset."SECONDARY_DIAG_03_CODE","<>WC")'="" strDiagnosis=" | Secondary Diagnosis Code 03: " _ $ZSTRIP(resultset."SECONDARY_DIAG_03_CODE","<>WC")
				Set:$ZSTRIP(resultset."SECONDARY_DIAG_04_CODE","<>WC")'="" strDiagnosis=" | Secondary Diagnosis Code 04: " _ $ZSTRIP(resultset."SECONDARY_DIAG_04_CODE","<>WC")
				set tLabResultItem.ReferenceComment = strDiagnosis
			}
			//set tLabResultItem.SubId = $ZSTRIP(resultset."LAB_TEST_RESULT_ID","<>WC")
			set tLabResultItem.TestItemCode.Code = nLabTestResultCounter //$ZSTRIP(resultset."LAB_TEST_CODE","<>WC")
			
			if $ZSTRIP(resultset."RESULT_NAME","<>WC")'="" {
				set tLabResultItem.TestItemCode.Description = $ZSTRIP(resultset."RESULT_NAME","<>WC")
				//set tLabResultItem.Comments = $ZSTRIP(resultset."LAB_TEST_DESC","<>WC")
			}
			else {
				set tLabResultItem.TestItemCode.Description = $ZSTRIP(resultset."LAB_TEST_DESC","<>WC")
				//set tLabResultItem.Comments = $ZSTRIP(resultset."LAB_TEST_PANEL_NAME","<>WC")
			}
			// set tLabResultItem.Comments = $ZSTRIP(resultset."LAB_TEST_RESULT_COMMENT_TEXT","<>WC")

			set tLabResultItem.TestItemStatus = "F"
			
			// set tLabResultItem.EncounterNumber = $ZSTRIP(resultset."PATIENT_ACCOUNT_NBR","<>WC")
			set tLabResultItem.PerformedAt.Code = $ZSTRIP(resultset."VENDOR_LAB_CODE","<>WC")
			set tLabResultItem.PerformedAt.Description = $ZSTRIP(resultset."VENDOR_LAB_CODE","<>WC")
			//set tLabResultItem.PerformedAt.Code = $ZSTRIP(resultset.SOURCE,"<>W")
			//set tLabResultItem.PerformedAt.Description = $ZSTRIP(resultset.SOURCE,"<>W")

			set tLabResultItem.TestItemCode.SDACodingStandard = $ZSTRIP(resultset.SOURCE,"<>W") _ "-LAB"
			set tLabResultItem.AnalysisTime = DATETIMEOFSERVICE
			set tLabResultItem.ObservationTime = DATETIMEOFSERVICE

			do tLabOrder.Result.ResultItems.Insert(tLabResultItem)			
			
			// Increment FOR..LOOP counter
			set nLabTestResultCounter = $I(nLabTestResultCounter)
		}
		$$$ThrowOnError(tSC)

		// Set Order Quantity 
		set tLabOrder.OrderQuantity = nLabTestResultCounter
		
		Write !, "        LAB Order => Test Result Iterms Count: ", nLabTestResultCounter, !
	}
	catch e 
	{
		set tSC = e.AsStatus()
		$$$LOGINFO(tSC)
	}
	quit tSC
}

Method CalcResultNormalRange(
	ReferenceLow As %String,
	ReferenceHigh As %String,
	ReferenceDescription As %String,
	ByRef ResultNormalRange)
{
	#dim tSC As %Status = $$$OK
	#dim e As %Exception.AbstractException
	Try 
	{
		if ReferenceLow'="", ReferenceHigh'=""
		{
			set ResultNormalRange = ReferenceLow _ "-"_ ReferenceHigh
		}
		elseif ReferenceLow'="", ReferenceHigh="", ReferenceDescription'="" 
		{
			set ResultNormalRange = ReferenceLow _ "-"_ ReferenceDescription
		}
		elseif ReferenceLow="", ReferenceHigh'="", ReferenceDescription'="" 
		{
			set ResultNormalRange = ReferenceHigh _ "-"_ ReferenceDescription
		}
		elseif ReferenceDescription'="" 
		{
			set ResultNormalRange = ReferenceDescription 
		}		
		else
		{
			set ResultNormalRange = ""
		}		
	} 
	catch e 
	{
		s tSC = e.AsStatus()
	}
	Quit tSC
}

// GET LAB TEST RSULTS RECORDS FROM STAGING TABLE

Method GetStagedRecords(
	pRequest As MVP.EG.Load.Request,
	ByRef pRecordResult As %SQL.StatementResult) As %Status
{
	
	#dim tSC As %Status = $$$OK
	#dim e As %Exception.AbstractException
	Try 
	{
		#dim tControl = ##class(MVP.EG.Load.Control).%OpenId(pRequest.ControlID)
		
		#dim tConfig = ##class(MVP.EG.Load.Configuration).GetConfig(tControl.InterfaceName)
		#dim tTablename = $TR($P(tConfig.StagingTableClass,".",1,($LENGTH(tConfig.StagingTableClass,".")-1)),".","_")_"."_$P(tConfig.StagingTableClass,".",*)

		#dim tDistinctFieldsList = $LFS(pRequest.DistinctValueFields)
		#dim tDistinctValuesList = $LFS(pRequest.DistinctValues)
		#dim tSQL As %String
		
		Set tSQL($I(tSQL)) = "SELECT *"
		Set tSQL($I(tSQL)) = "FROM "_tTablename
		Set tSQL($I(tSQL)) = "WHERE "_tConfig.GroupBy1_" = '"_tControl.GroupBy1_"'"
		Set:tConfig.GroupBy2'="" tSQL($I(tSQL)) = "AND "_tConfig.GroupBy2_" = '"_tControl.GroupBy2_"'"
		Set:tConfig.GroupBy3'="" tSQL($I(tSQL)) = "AND "_tConfig.GroupBy3_" = '"_tControl.GroupBy3_"'"
		Set:tConfig.GroupBy4'="" tSQL($I(tSQL)) = "AND "_tConfig.GroupBy4_" = '"_tControl.GroupBy4_"'"
		Set:tConfig.GroupBy5'="" tSQL($I(tSQL)) = "AND "_tConfig.GroupBy5_" = '"_tControl.GroupBy5_"'"
		
		#dim fieldCounter As %Integer
		For fieldCounter=1:1:$LL(tDistinctFieldsList) 
		{
			// if $LI(tDistinctValuesList,i) = "" CONTINUE
			if $LI(tDistinctValuesList,fieldCounter) '= "" {
				Set tSQL($I(tSQL)) = "AND "_$LI(tDistinctFieldsList,fieldCounter)_" = '"_$LI(tDistinctValuesList,fieldCounter)_"'"
			}
			else {
				Set tSQL($I(tSQL)) = "AND "_$LI(tDistinctFieldsList,fieldCounter)_" IS NULL"				
			}
		}

		Set tSQLStatement = ##class(%SQL.Statement).%New()
		Set tSC = tSQLStatement.%Prepare(.tSQL)
		$$$ThrowOnError(tSC)
		
		Set pRecordResult = tSQLStatement.%Execute()
		If pRecordResult.%SQLCODE < 0 
		{
			#dim ec = ##class(%Exception.SQL).CreateFromSQLCODE(pRecordResult.%SQLCODE, pRecordResult.%Message)
			throw ec
		}
	} 
	catch e 
	{
		s tSC = e.AsStatus()
	}
	Quit tSC
}

// Set ClassMethod as the DEBUG TARGE 

ClassMethod TestBusinessProcess() As %Status
{
	#dim tSC As %Status = $$$OK
	#dim e As %Exception.AbstractException
	Try 
	{
		set tRequest=##class(MVP.EG.Load.Request).%New()
		set tRequest.ControlID = "1352"
		set tRequest.DistinctValueFields = "MEME_CK,DATE_OF_SERVICE,LAB_TEST_PANEL_CODE"
		set tRequest.DistinctValues = "59557200,2019-10-05,5000005"  

		#dim tProcess=##class(Ens.Host).GetShadowInstance("MVP.EG.ClinicalLabResults.Process")

		do tProcess.OnInit()

		set tSC = tProcess.OnRequest(tRequest,.tResponse)		

		// Set tRequest=##class(MVP.EG.Load.Request).%OpenId(724402)
		// #dim tProcess=##class(Ens.Host).GetShadowInstance("MVP.EG.ClinicalLabResults.Process")
		// do tProcess.OnInit()
		// Set tProcess.%SessionId = 1181240
		// Set tSC = tProcess.OnRequest(tRequest,.tResponse)
	} 
	catch e 
	{
		s tSC = e.AsStatus()
	}
	Quit tSC
}

/// Revision number of this class
Parameter SrcVer = 233;

Storage Default
{
<Data name="ProcessDefaultData">
<Subscript>"Process"</Subscript>
<Value name="1">
<Value>TargetConfigName</Value>
</Value>
<Value name="2">
<Value>ControlID</Value>
</Value>
<Value name="3">
<Value>ForceEligibilityAndMemberLoadForTest</Value>
</Value>
</Data>
<DefaultData>ProcessDefaultData</DefaultData>
<Type>%Storage.Persistent</Type>
}

}
