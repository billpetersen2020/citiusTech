/// 
/// A persistent table to stage data from the external Link Table <class>MVP.EG.ishs.USVMVPHEALTHSHARECLINICALLABRESULTS</class>
/// See methods
/// <ul>
/// <li><method>LoadFromLinkTable</method></li>
/// <li><method>LoadFromLinkParallel</method></li>
/// </ul>
/// to load the data from the Link Table
Class MVP.EG.ishs.Staging.USVMVPHEALTHSHARECLINICALLABRESULTS Extends %Persistent [ DdlAllowed ]
{

Property ABNORMALLABTESTRESULTCODE As %Library.String(MAXLEN = 9) [ SqlColumnNumber = 67, SqlFieldName = ABNORMAL_LAB_TEST_RESULT_CODE ];

Property ACCESSIONNUMBER As %Library.String(MAXLEN = 255) [ SqlColumnNumber = 26, SqlFieldName = ACCESSIONNUMBER ];

Property ACCTNAME As %Library.String(MAXLEN = 50) [ SqlColumnNumber = 74, SqlFieldName = ACCTNAME ];

Property ACCTNUM As %Library.String(MAXLEN = 50) [ SqlColumnNumber = 73, SqlFieldName = ACCTNUM ];

Property ADDRESS1 As %Library.String(MAXLEN = 255) [ SqlColumnNumber = 14, SqlFieldName = ADDRESS1 ];

Property ADDRESS2 As %Library.String(MAXLEN = 255) [ SqlColumnNumber = 15, SqlFieldName = ADDRESS2 ];

Property BIRTHDATE As %Library.String(MAXLEN = 10) [ SqlColumnNumber = 13, SqlFieldName = BIRTH_DATE ];

Property CITY As %Library.String(MAXLEN = 255) [ SqlColumnNumber = 16, SqlFieldName = CITY ];

Property DATEOFSERVICE As %Library.String(MAXLEN = 10) [ Required, SqlColumnNumber = 54, SqlFieldName = DATE_OF_SERVICE ];

Property GENDER As %Library.String(MAXLEN = 255) [ SqlColumnNumber = 20, SqlFieldName = GENDER ];

Property GRGRCK As %Library.Integer [ SqlColumnNumber = 5, SqlFieldName = GRGR_CK ];

Property GROUPID As %Library.String(MAXLEN = 8) [ SqlColumnNumber = 3, SqlFieldName = GROUP_ID ];

Property LABDATASOURCECODE As %Library.String(MAXLEN = 15) [ SqlColumnNumber = 71, SqlFieldName = LAB_DATA_SOURCE_CODE ];

Property LABORDER As %Library.Integer [ SqlColumnNumber = 78, SqlFieldName = LAB_ORDER ];

Property LABTESTCODE As %Library.String(MAXLEN = 23) [ SqlColumnNumber = 57, SqlFieldName = LAB_TEST_CODE ];

Property LABTESTDESC As %Library.String(MAXLEN = 72) [ SqlColumnNumber = 59, SqlFieldName = LAB_TEST_DESC ];

Property LABTESTPANELCODE As %Library.String(MAXLEN = 11) [ SqlColumnNumber = 55, SqlFieldName = LAB_TEST_PANEL_CODE ];

Property LABTESTPANELNAME As %Library.String(MAXLEN = 45) [ SqlColumnNumber = 56, SqlFieldName = LAB_TEST_PANEL_NAME ];

Property LABTESTRESULT2VALUE As %Library.String(MAXLEN = 19) [ SqlColumnNumber = 69, SqlFieldName = LAB_TEST_RESULT_2_VALUE ];

Property LABTESTRESULT2VALUEUOM As %Library.String(MAXLEN = 20) [ SqlColumnNumber = 70, SqlFieldName = LAB_TEST_RESULT_2_VALUE_UOM ];

Property LABTESTRESULTCOMMENTTEXT As %Library.String(MAXLEN = 255) [ SqlColumnNumber = 68, SqlFieldName = LAB_TEST_RESULT_COMMENT_TEXT ];

Property LABTESTRESULTID As %Library.String(MAXLEN = 255) [ SqlColumnNumber = 8, SqlFieldName = LAB_TEST_RESULT_ID ];

Property LABTESTRESULTTEXTVALUE As %Library.String(MAXLEN = 65) [ SqlColumnNumber = 62, SqlFieldName = LAB_TEST_RESULT_TEXT_VALUE ];

Property LABTESTRESULTVALUE As %Library.String(MAXLEN = 255) [ SqlColumnNumber = 61, SqlFieldName = LAB_TEST_RESULT_VALUE ];

Property LABTESTRESULTVALUEUOM As %Library.String(MAXLEN = 20) [ SqlColumnNumber = 63, SqlFieldName = LAB_TEST_RESULT_VALUE_UOM ];

Property LOCALRESULTCODE As %Library.String(MAXLEN = 255) [ SqlColumnNumber = 60, SqlFieldName = LOCAL_RESULT_CODE ];

Property LOINCCODE As %Library.String(MAXLEN = 11) [ SqlColumnNumber = 53, SqlFieldName = LOINC_CODE ];

Property MEDICAIDID As %Library.String(MAXLEN = 20) [ SqlColumnNumber = 7, SqlFieldName = MEDICAID_ID ];

Property MEMBERFIRSTNAME As %Library.String(MAXLEN = 255) [ SqlColumnNumber = 10, SqlFieldName = MEMBER_FIRST_NAME ];

Property MEMBERID As %Library.String(MAXLEN = 50) [ Required, SqlColumnNumber = 2, SqlFieldName = MEMBER_ID ];

Property MEMBERLASTNAME As %Library.String(MAXLEN = 255) [ SqlColumnNumber = 12, SqlFieldName = MEMBER_LAST_NAME ];

Property MEMBERMIDDLENAME As %Library.String(MAXLEN = 255) [ SqlColumnNumber = 11, SqlFieldName = MEMBER_MIDDLE_NAME ];

Property MEMECK As %Library.Integer [ Required, SqlColumnNumber = 4, SqlFieldName = MEME_CK ];

Property ORDERINGACCOUNT As %Library.String(MAXLEN = 255) [ SqlColumnNumber = 37, SqlFieldName = ORDERING_ACCOUNT ];

Property ORDERINGACCOUNTNAME As %Library.String(MAXLEN = 255) [ SqlColumnNumber = 38, SqlFieldName = ORDERINGACCOUNTNAME ];

Property ORDERNAME As %Library.String(MAXLEN = 255) [ SqlColumnNumber = 28, SqlFieldName = ORDERNAME ];

Property ORDERNUM As %Library.String(MAXLEN = 255) [ SqlColumnNumber = 27, SqlFieldName = ORDER_NUM ];

Property PATIENTACCOUNTNBR As %Library.String(MAXLEN = 20) [ SqlColumnNumber = 24, SqlFieldName = PATIENT_ACCOUNT_NBR ];

Property PAYERACCOUNT As %Library.String(MAXLEN = 50) [ SqlColumnNumber = 29, SqlFieldName = PAYER_ACCOUNT ];

Property PAYERCODE As %Library.String(MAXLEN = 50) [ SqlColumnNumber = 30, SqlFieldName = PAYER_CODE ];

Property PAYERNAME As %Library.String(MAXLEN = 100) [ SqlColumnNumber = 31, SqlFieldName = PAYER_NAME ];

Property PHONE As %Library.String(MAXLEN = 255) [ SqlColumnNumber = 19, SqlFieldName = PHONE ];

Property PRINCIPALDIAGCODE As %Library.String(MAXLEN = 255) [ SqlColumnNumber = 47, SqlFieldName = PRINCIPAL_DIAG_CODE ];

Property PROCEDURECODE As %Library.String(MAXLEN = 9) [ SqlColumnNumber = 52, SqlFieldName = PROCEDURE_CODE ];

Property PRODUCTID As %Library.String(MAXLEN = 8) [ SqlColumnNumber = 22, SqlFieldName = PRODUCT_ID ];

Property REFERRINGPROVADDR1 As %Library.String(MAXLEN = 255) [ SqlColumnNumber = 40, SqlFieldName = REFERRING_PROV_ADDR_1 ];

Property REFERRINGPROVADDR2 As %Library.String(MAXLEN = 255) [ SqlColumnNumber = 41, SqlFieldName = REFERRING_PROV_ADDR_2 ];

Property REFERRINGPROVCITY As %Library.String(MAXLEN = 255) [ SqlColumnNumber = 42, SqlFieldName = REFERRING_PROV_CITY ];

Property REFERRINGPROVGROUPNAME As %Library.String(MAXLEN = 55) [ SqlColumnNumber = 34, SqlFieldName = REFERRING_PROV_GROUP_NAME ];

Property REFERRINGPROVGROUPNBR As %Library.String(MAXLEN = 15) [ SqlColumnNumber = 33, SqlFieldName = REFERRING_PROV_GROUP_NBR ];

Property REFERRINGPROVIDERNPI As %Library.String(MAXLEN = 12) [ SqlColumnNumber = 36, SqlFieldName = REFERRING_PROVIDER_NPI ];

Property REFERRINGPROVIDERUPIN As %Library.String(MAXLEN = 255) [ SqlColumnNumber = 35, SqlFieldName = REFERRING_PROVIDER_UPIN ];

Property REFERRINGPROVNAME As %Library.String(MAXLEN = 255) [ SqlColumnNumber = 39, SqlFieldName = REFERRING_PROV_NAME ];

Property REFERRINGPROVPHONENBR As %Library.String(MAXLEN = 255) [ SqlColumnNumber = 45, SqlFieldName = REFERRING_PROV_PHONE_NBR ];

Property REFERRINGPROVSTATE As %Library.String(MAXLEN = 255) [ SqlColumnNumber = 43, SqlFieldName = REFERRING_PROV_STATE ];

Property REFERRINGPROVZIPCODE As %Library.String(MAXLEN = 255) [ SqlColumnNumber = 44, SqlFieldName = REFERRING_PROV_ZIP_CODE ];

Property REFRANGEDESC As %Library.String(MAXLEN = 50) [ SqlColumnNumber = 66, SqlFieldName = REF_RANGE_DESC ];

Property REFRANGEHIGHVALUE As %Library.String(MAXLEN = 19) [ SqlColumnNumber = 65, SqlFieldName = REF_RANGE_HIGH_VALUE ];

Property REFRANGELOWVALUE As %Library.String(MAXLEN = 19) [ SqlColumnNumber = 64, SqlFieldName = REF_RANGE_LOW_VALUE ];

Property RELATIONSHIPCODE As %Library.String(MAXLEN = 50) [ SqlColumnNumber = 9, SqlFieldName = RELATIONSHIP_CODE ];

Property RESULTNAME As %Library.String(MAXLEN = 100) [ SqlColumnNumber = 58, SqlFieldName = RESULT_NAME ];

Property REVIND As %Library.String(MAXLEN = 1) [ SqlColumnNumber = 75, SqlFieldName = REV_IND ];

Property SECONDARYDIAG01CODE As %Library.String(MAXLEN = 255) [ SqlColumnNumber = 48, SqlFieldName = SECONDARY_DIAG_01_CODE ];

Property SECONDARYDIAG02CODE As %Library.String(MAXLEN = 255) [ SqlColumnNumber = 49, SqlFieldName = SECONDARY_DIAG_02_CODE ];

Property SECONDARYDIAG03CODE As %Library.String(MAXLEN = 255) [ SqlColumnNumber = 50, SqlFieldName = SECONDARY_DIAG_03_CODE ];

Property SECONDARYDIAG04CODE As %Library.String(MAXLEN = 255) [ SqlColumnNumber = 51, SqlFieldName = SECONDARY_DIAG_04_CODE ];

Property SOURCE As %Library.String(MAXLEN = 50) [ SqlColumnNumber = 72, SqlFieldName = SOURCE ];

Property SPECIALTY As %Library.String(MAXLEN = 50) [ SqlColumnNumber = 46, SqlFieldName = SPECIALTY ];

Property SPECIMENID As %Library.String(MAXLEN = 50) [ SqlColumnNumber = 25, SqlFieldName = SPECIMEN_ID ];

Property SSNUM As %Library.String(MAXLEN = 255) [ SqlColumnNumber = 21, SqlFieldName = SSNUM ];

Property STATE As %Library.String(MAXLEN = 255) [ SqlColumnNumber = 17, SqlFieldName = STATE ];

Property STGRECLOADDATE As %Library.TimeStamp [ SqlColumnNumber = 77, SqlFieldName = STG_REC_LOADDATE ];

Property STGRECSTATUS As %Library.String(MAXLEN = 1) [ SqlColumnNumber = 76, SqlFieldName = STG_REC_STATUS ];

Property VENDORBILLINGID As %Library.String(MAXLEN = 9) [ SqlColumnNumber = 23, SqlFieldName = VENDOR_BILLING_ID ];

Property VENDORLABCODE As %Library.String(MAXLEN = 50) [ SqlColumnNumber = 32, SqlFieldName = VENDOR_LAB_CODE ];

Property VENDORTESTRESULTID As %Library.String(MAXLEN = 40) [ SqlColumnNumber = 6, SqlFieldName = VENDOR_TEST_RESULT_ID ];

Property ZIP As %Library.String(MAXLEN = 255) [ SqlColumnNumber = 18, SqlFieldName = ZIP ];

/// Maintain original index definition that is defined in Link table
Index MainIndex On (MEMBERID, MEMECK, DATEOFSERVICE);

Index DATEOFSERVICE On DATEOFSERVICE;

Index LABTESTPANELCODE On LABTESTPANELCODE;

Index MEMBERID On MEMBERID;

Index MEMECK On MEMECK;

/// Read ALL of the records from the Link table and insert into the Staging table in a single thread.
/// <br/>pInit is used to indicate of <method>%KillExtent</method> should be called 
/// <example>
/// Set tSC=##Class(MVP.EG.ishs.Staging.USVMVPHEALTHSHARECLINICALLABRESULTS).LoadFromLinkTable(1,1)
/// </example>
ClassMethod LoadFromLinkTable(
	pInit As %Boolean = 1,
	pDisplay As %Boolean = 0,
	pMaxLoadCount As %Integer = 999999999999999,
	pTuneTable As %Boolean = 1,
	pDisableJournaling As %Boolean = 0) As %Status
{
	#dim tSC As %Status=$$$OK
	#dim eException As %Exception.AbstractException
	#dim tCnt As %Integer=0
	#dim tResult As %SQL.StatementResult
	Try
	{
		#dim tStart As %String=$ZH
       If $Get(pDisableJournaling)=1 Do DISABLE^%NOJRN
		If pInit $$$THROWONERROR(tSC,..%KillExtent())
		Set tStatement=##class(%SQL.Statement).%New()
        $$$THROWONERROR(tSC,tStatement.%Prepare("SELECT M.MEME_CK, M.MEMBER_ID, L.ABNORMAL_LAB_TEST_RESULT_CODE, L.ACCESSIONNUMBER, L.ACCTNAME, L.ACCTNUM, L.ADDRESS1, L.ADDRESS2, L.BIRTH_DATE, L.CITY, L.DATE_OF_SERVICE, L.GENDER, L.GRGR_CK, L.GROUP_ID, L.LAB_DATA_SOURCE_CODE, L.LAB_ORDER, L.LAB_TEST_CODE, L.LAB_TEST_DESC, L.LAB_TEST_PANEL_CODE, L.LAB_TEST_PANEL_NAME, L.LAB_TEST_RESULT_2_VALUE, L.LAB_TEST_RESULT_2_VALUE_UOM, L.LAB_TEST_RESULT_COMMENT_TEXT, L.LAB_TEST_RESULT_ID, L.LAB_TEST_RESULT_TEXT_VALUE, L.LAB_TEST_RESULT_VALUE, L.LAB_TEST_RESULT_VALUE_UOM, L.LOCAL_RESULT_CODE, L.LOINC_CODE, L.MEDICAID_ID, L.MEMBER_FIRST_NAME, L.MEMBER_ID, L.MEMBER_LAST_NAME, L.MEMBER_MIDDLE_NAME, L.ORDERING_ACCOUNT, L.ORDERINGACCOUNTNAME, L.ORDERNAME, L.ORDER_NUM, L.PATIENT_ACCOUNT_NBR, L.PAYER_ACCOUNT, L.PAYER_CODE, L.PAYER_NAME, L.PHONE, L.PRINCIPAL_DIAG_CODE, L.PROCEDURE_CODE, L.PRODUCT_ID, L.REFERRING_PROV_ADDR_1, L.REFERRING_PROV_ADDR_2, L.REFERRING_PROV_CITY, L.REFERRING_PROV_GROUP_NAME, L.REFERRING_PROV_GROUP_NBR, L.REFERRING_PROVIDER_NPI, L.REFERRING_PROVIDER_UPIN, L.REFERRING_PROV_NAME, L.REFERRING_PROV_PHONE_NBR, L.REFERRING_PROV_STATE, L.REFERRING_PROV_ZIP_CODE, L.REF_RANGE_DESC, L.REF_RANGE_HIGH_VALUE, L.REF_RANGE_LOW_VALUE, L.RELATIONSHIP_CODE, L.RESULT_NAME,REV_IND, L.SECONDARY_DIAG_01_CODE, L.SECONDARY_DIAG_02_CODE, L.SECONDARY_DIAG_03_CODE, L.SECONDARY_DIAG_04_CODE, L.SOURCE, L.SPECIALTY, L.SPECIMEN_ID, L.SSNUM, L.STATE, L.STG_REC_LOADDATE, L.STG_REC_STATUS, L.VENDOR_BILLING_ID, L.VENDOR_LAB_CODE, L.VENDOR_TEST_RESULT_ID, L.ZIP FROM MVP_EG_ishs.USV_MVP_HEALTHSHARE_MEMBER M INNER JOIN (SELECT * FROM MVP_EG_ishs.USV_MVP_HEALTHSHARE_CLINICAL_LAB_RESULTS) L ON M.MEME_CK = L.MEME_CK WHERE M.MEME_CK IS NOT NULL"))
		Set tResult=tStatement.%Execute()
		FOR  {
			Quit:'tResult.%Next(.tSC)
			If $$$ISERR(tSC) $$$ThrowStatus(tSC)
			Set tCnt=tCnt+1 If (pDisplay)&&(tCnt#10000=0) Write "."
			If tCnt=pMaxLoadCount Write:pDisplay !,"Max Records loaded" Quit
			Set ABNORMALLABTESTRESULTCODE=$zstrip(tResult."ABNORMAL_LAB_TEST_RESULT_CODE","<>CW")
			Set ACCESSIONNUMBER=$zstrip(tResult."ACCESSIONNUMBER","<>CW")
			Set ACCTNAME=$zstrip(tResult."ACCTNAME","<>CW")
			Set ACCTNUM=$zstrip(tResult."ACCTNUM","<>CW")
			Set ADDRESS1=$zstrip(tResult."ADDRESS1","<>CW")
			Set ADDRESS2=$zstrip(tResult."ADDRESS2","<>CW")
			Set BIRTHDATE=$zstrip(tResult."BIRTH_DATE","<>CW")
			Set CITY=$zstrip(tResult."CITY","<>CW")
			Set DATEOFSERVICE=$zstrip(tResult."DATE_OF_SERVICE","<>CW")
			Set GENDER=$zstrip(tResult."GENDER","<>CW")
			Set GRGRCK=$zstrip(tResult."GRGR_CK","<>CW")
			Set GROUPID=$zstrip(tResult."GROUP_ID","<>CW")
			Set LABDATASOURCECODE=$zstrip(tResult."LAB_DATA_SOURCE_CODE","<>CW")
			Set LABORDER=$zstrip(tResult."LAB_ORDER","<>CW")
			Set LABTESTCODE=$zstrip(tResult."LAB_TEST_CODE","<>CW")
			Set LABTESTDESC=$zstrip(tResult."LAB_TEST_DESC","<>CW")
			Set LABTESTPANELCODE=$zstrip(tResult."LAB_TEST_PANEL_CODE","<>CW")
			Set LABTESTPANELNAME=$zstrip(tResult."LAB_TEST_PANEL_NAME","<>CW")
			Set LABTESTRESULT2VALUE=$zstrip(tResult."LAB_TEST_RESULT_2_VALUE","<>CW")
			Set LABTESTRESULT2VALUEUOM=$zstrip(tResult."LAB_TEST_RESULT_2_VALUE_UOM","<>CW")
			Set LABTESTRESULTCOMMENTTEXT=$zstrip(tResult."LAB_TEST_RESULT_COMMENT_TEXT","<>CW")
			Set LABTESTRESULTID=$zstrip(tResult."LAB_TEST_RESULT_ID","<>CW")
			Set LABTESTRESULTTEXTVALUE=$zstrip(tResult."LAB_TEST_RESULT_TEXT_VALUE","<>CW")
			Set LABTESTRESULTVALUE=$zstrip(tResult."LAB_TEST_RESULT_VALUE","<>CW")
			Set LABTESTRESULTVALUEUOM=$zstrip(tResult."LAB_TEST_RESULT_VALUE_UOM","<>CW")
			Set LOCALRESULTCODE=$zstrip(tResult."LOCAL_RESULT_CODE","<>CW")
			Set LOINCCODE=$zstrip(tResult."LOINC_CODE","<>CW")
			Set MEDICAIDID=$zstrip(tResult."MEDICAID_ID","<>CW")
			Set MEMBERFIRSTNAME=$zstrip(tResult."MEMBER_FIRST_NAME","<>CW")
			Set MEMBERID=$zstrip(tResult."MEMBER_ID","<>CW")
			Set MEMBERLASTNAME=$zstrip(tResult."MEMBER_LAST_NAME","<>CW")
			Set MEMBERMIDDLENAME=$zstrip(tResult."MEMBER_MIDDLE_NAME","<>CW")
			Set MEMECK=$zstrip(tResult."MEME_CK","<>CW")
			Set ORDERINGACCOUNT=$zstrip(tResult."ORDERING_ACCOUNT","<>CW")
			Set ORDERINGACCOUNTNAME=$zstrip(tResult."ORDERINGACCOUNTNAME","<>CW")
			Set ORDERNAME=$zstrip(tResult."ORDERNAME","<>CW")
			Set ORDERNUM=$zstrip(tResult."ORDER_NUM","<>CW")
			Set PATIENTACCOUNTNBR=$zstrip(tResult."PATIENT_ACCOUNT_NBR","<>CW")
			Set PAYERACCOUNT=$zstrip(tResult."PAYER_ACCOUNT","<>CW")
			Set PAYERCODE=$zstrip(tResult."PAYER_CODE","<>CW")
			Set PAYERNAME=$zstrip(tResult."PAYER_NAME","<>CW")
			Set PHONE=$zstrip(tResult."PHONE","<>CW")
			Set PRINCIPALDIAGCODE=$zstrip(tResult."PRINCIPAL_DIAG_CODE","<>CW")
			Set PROCEDURECODE=$zstrip(tResult."PROCEDURE_CODE","<>CW")
			Set PRODUCTID=$zstrip(tResult."PRODUCT_ID","<>CW")
			Set REFERRINGPROVADDR1=$zstrip(tResult."REFERRING_PROV_ADDR_1","<>CW")
			Set REFERRINGPROVADDR2=$zstrip(tResult."REFERRING_PROV_ADDR_2","<>CW")
			Set REFERRINGPROVCITY=$zstrip(tResult."REFERRING_PROV_CITY","<>CW")
			Set REFERRINGPROVGROUPNAME=$zstrip(tResult."REFERRING_PROV_GROUP_NAME","<>CW")
			Set REFERRINGPROVGROUPNBR=$zstrip(tResult."REFERRING_PROV_GROUP_NBR","<>CW")
			Set REFERRINGPROVIDERNPI=$zstrip(tResult."REFERRING_PROVIDER_NPI","<>CW")
			Set REFERRINGPROVIDERUPIN=$zstrip(tResult."REFERRING_PROVIDER_UPIN","<>CW")
			Set REFERRINGPROVNAME=$zstrip(tResult."REFERRING_PROV_NAME","<>CW")
			Set REFERRINGPROVPHONENBR=$zstrip(tResult."REFERRING_PROV_PHONE_NBR","<>CW")
			Set REFERRINGPROVSTATE=$zstrip(tResult."REFERRING_PROV_STATE","<>CW")
			Set REFERRINGPROVZIPCODE=$zstrip(tResult."REFERRING_PROV_ZIP_CODE","<>CW")
			Set REFRANGEDESC=$zstrip(tResult."REF_RANGE_DESC","<>CW")
			Set REFRANGEHIGHVALUE=$zstrip(tResult."REF_RANGE_HIGH_VALUE","<>CW")
			Set REFRANGELOWVALUE=$zstrip(tResult."REF_RANGE_LOW_VALUE","<>CW")
			Set RELATIONSHIPCODE=$zstrip(tResult."RELATIONSHIP_CODE","<>CW")
			Set RESULTNAME=$zstrip(tResult."RESULT_NAME","<>CW")
			Set REVIND=$zstrip(tResult."REV_IND","<>CW")
			Set SECONDARYDIAG01CODE=$zstrip(tResult."SECONDARY_DIAG_01_CODE","<>CW")
			Set SECONDARYDIAG02CODE=$zstrip(tResult."SECONDARY_DIAG_02_CODE","<>CW")
			Set SECONDARYDIAG03CODE=$zstrip(tResult."SECONDARY_DIAG_03_CODE","<>CW")
			Set SECONDARYDIAG04CODE=$zstrip(tResult."SECONDARY_DIAG_04_CODE","<>CW")
			Set SOURCE=$zstrip(tResult."SOURCE","<>CW")
			Set SPECIALTY=$zstrip(tResult."SPECIALTY","<>CW")
			Set SPECIMENID=$zstrip(tResult."SPECIMEN_ID","<>CW")
			Set SSNUM=$zstrip(tResult."SSNUM","<>CW")
			Set STATE=$zstrip(tResult."STATE","<>CW")
			Set STGRECLOADDATE=$zstrip(tResult."STG_REC_LOADDATE","<>CW")
			Set STGRECSTATUS=$zstrip(tResult."STG_REC_STATUS","<>CW")
			Set VENDORBILLINGID=$zstrip(tResult."VENDOR_BILLING_ID","<>CW")
			Set VENDORLABCODE=$zstrip(tResult."VENDOR_LAB_CODE","<>CW")
			Set VENDORTESTRESULTID=$zstrip(tResult."VENDOR_TEST_RESULT_ID","<>CW")
			Set ZIP=$zstrip(tResult."ZIP","<>CW")
			#;No Constraint checking, no index filing, no locking and do not call the trigger
			#;%NOTRIGGER as we do not have to update an existing row for the same source Id
			&SQL(INSERT %NOCHECK %NOINDEX %NOLOCK %NOTRIGGER INTO MVP_EG_ishs_Staging.USVMVPHEALTHSHARECLINICALLABRESULTS
			     (ABNORMAL_LAB_TEST_RESULT_CODE,ACCESSIONNUMBER,ACCTNAME,ACCTNUM,ADDRESS1,ADDRESS2,BIRTH_DATE,CITY,DATE_OF_SERVICE,GENDER,GRGR_CK,GROUP_ID,LAB_DATA_SOURCE_CODE,LAB_ORDER,LAB_TEST_CODE,LAB_TEST_DESC,LAB_TEST_PANEL_CODE,LAB_TEST_PANEL_NAME,LAB_TEST_RESULT_2_VALUE,LAB_TEST_RESULT_2_VALUE_UOM,LAB_TEST_RESULT_COMMENT_TEXT,LAB_TEST_RESULT_ID,LAB_TEST_RESULT_TEXT_VALUE,LAB_TEST_RESULT_VALUE,LAB_TEST_RESULT_VALUE_UOM,LOCAL_RESULT_CODE,LOINC_CODE,MEDICAID_ID,MEMBER_FIRST_NAME,MEMBER_ID,MEMBER_LAST_NAME,MEMBER_MIDDLE_NAME,MEME_CK,ORDERING_ACCOUNT,ORDERINGACCOUNTNAME,ORDERNAME,ORDER_NUM,PATIENT_ACCOUNT_NBR,PAYER_ACCOUNT,PAYER_CODE,PAYER_NAME,PHONE,PRINCIPAL_DIAG_CODE,PROCEDURE_CODE,PRODUCT_ID,REFERRING_PROV_ADDR_1,REFERRING_PROV_ADDR_2,REFERRING_PROV_CITY,REFERRING_PROV_GROUP_NAME,REFERRING_PROV_GROUP_NBR,REFERRING_PROVIDER_NPI,REFERRING_PROVIDER_UPIN,REFERRING_PROV_NAME,REFERRING_PROV_PHONE_NBR,REFERRING_PROV_STATE,REFERRING_PROV_ZIP_CODE,REF_RANGE_DESC,REF_RANGE_HIGH_VALUE,REF_RANGE_LOW_VALUE,RELATIONSHIP_CODE,RESULT_NAME,REV_IND,SECONDARY_DIAG_01_CODE,SECONDARY_DIAG_02_CODE,SECONDARY_DIAG_03_CODE,SECONDARY_DIAG_04_CODE,SOURCE,SPECIALTY,SPECIMEN_ID,SSNUM,STATE,STG_REC_LOADDATE,STG_REC_STATUS,VENDOR_BILLING_ID,VENDOR_LAB_CODE,VENDOR_TEST_RESULT_ID,ZIP) VALUES (:ABNORMALLABTESTRESULTCODE,:ACCESSIONNUMBER,:ACCTNAME,:ACCTNUM,:ADDRESS1,:ADDRESS2,:BIRTHDATE,:CITY,:DATEOFSERVICE,:GENDER,:GRGRCK,:GROUPID,:LABDATASOURCECODE,:LABORDER,:LABTESTCODE,:LABTESTDESC,:LABTESTPANELCODE,:LABTESTPANELNAME,:LABTESTRESULT2VALUE,:LABTESTRESULT2VALUEUOM,:LABTESTRESULTCOMMENTTEXT,:LABTESTRESULTID,:LABTESTRESULTTEXTVALUE,:LABTESTRESULTVALUE,:LABTESTRESULTVALUEUOM,:LOCALRESULTCODE,:LOINCCODE,:MEDICAIDID,:MEMBERFIRSTNAME,:MEMBERID,:MEMBERLASTNAME,:MEMBERMIDDLENAME,:MEMECK,:ORDERINGACCOUNT,:ORDERINGACCOUNTNAME,:ORDERNAME,:ORDERNUM,:PATIENTACCOUNTNBR,:PAYERACCOUNT,:PAYERCODE,:PAYERNAME,:PHONE,:PRINCIPALDIAGCODE,:PROCEDURECODE,:PRODUCTID,:REFERRINGPROVADDR1,:REFERRINGPROVADDR2,:REFERRINGPROVCITY,:REFERRINGPROVGROUPNAME,:REFERRINGPROVGROUPNBR,:REFERRINGPROVIDERNPI,:REFERRINGPROVIDERUPIN,:REFERRINGPROVNAME,:REFERRINGPROVPHONENBR,:REFERRINGPROVSTATE,:REFERRINGPROVZIPCODE,:REFRANGEDESC,:REFRANGEHIGHVALUE,:REFRANGELOWVALUE,:RELATIONSHIPCODE,:RESULTNAME,:REVIND,:SECONDARYDIAG01CODE,:SECONDARYDIAG02CODE,:SECONDARYDIAG03CODE,:SECONDARYDIAG04CODE,:SOURCE,:SPECIALTY,:SPECIMENID,:SSNUM,:STATE,:STGRECLOADDATE,:STGRECSTATUS,:VENDORBILLINGID,:VENDORLABCODE,:VENDORTESTRESULTID,:ZIP)
			     )
			If SQLCODE<0 THROW ##class(%Exception.SQL).CreateFromSQLCODE(SQLCODE,$Get(%msg))
			}
		$$$THROWONERROR(tSC,..%BuildIndices(,1))
		If pTuneTable {
			Do ##Class(%SYSTEM.SQL).TuneTable("MVP_EG_ishs_Staging.USVMVPHEALTHSHARECLINICALLABRESULTS",,pDisplay)
		}
		If pDisplay Write !,"Duration: ",$FNUMBER($zh-tStart,",",2)," Records: ",$FNUMBER(tCnt,",")," Records Per Second: ",$FNUMBER(tCnt/($zh-tStart),",",2)
	}
	Catch eException
	{
		Set tSC=eException.AsStatus()
	}
   If $Get(pDisableJournaling)=1 Do ENABLE^%NOJRN
	Quit tSC
}

/// Read All of the data from the Link table and load using multiple threads based on <class>%SYSTEM.CPU</class>
/// <br/>pInit is used to indicate of <method>%KillExtent</method> should be called 
/// <example>
/// Set tSC=##Class(MVP.EG.ishs.Staging.USVMVPHEALTHSHARECLINICALLABRESULTS).LoadFromLinkParallel(1,1)
/// </example>
ClassMethod LoadFromLinkParallel(
	pInit As %Boolean = 1,
	pDisplay As %Boolean = 0,
	pTuneTable As %Boolean = 1,
	pDisableJournaling As %Boolean = 0) As %Status
{
	#dim tSC 		As %Status=$$$OK
	#dim eException As %Exception.AbstractException
	#dim tQueue 	As %SYSTEM.WorkMgr
	#dim tStart 	As %TimeStamp=$ZHOROLOG
	#dim i 			As %Integer
	Try
	{
       If $Get(pDisableJournaling) Do DISABLE^%NOJRN
		If pInit $$$THROWONERROR(tSC,..%KillExtent())
		Set tQueue=##class(%SYSTEM.WorkMgr).Initialize("/multicompile=1",.tSC) If $$$ISERR(tSC) 
		Set tSystem=##class(%SYSTEM.CPU).%New()
		For i=0:1:(tSystem.nCores-1) {
			Write !,"Starting Job: ",i+1
			Set tSC=tQueue.Queue("##class(MVP.EG.ishs.Staging.USVMVPHEALTHSHARECLINICALLABRESULTS).LoadModFromLinkTable",i,pDisplay,pDisableJournaling) If $$$ISERR(tSC) ; Report Error
		}
		Set tSC=tQueue.WaitForComplete() If $$$ISERR(tSC) ; Report Error
		$$$THROWONERROR(tSC,..%BuildIndices(,1))
		If pTuneTable {
			Do ##Class(%SYSTEM.SQL).TuneTable("MVP_EG_ishs_Staging.USVMVPHEALTHSHARECLINICALLABRESULTS",,pDisplay)
		}
       If pDisplay {
			Write !,"Duration: ",$FNUMBER($zh-tStart,",",2)
			&SQL(SELECT COUNT(*) INTO :tCnt FROM MVP_EG_ishs_Staging.USVMVPHEALTHSHARECLINICALLABRESULTS)
			Write " Records: ",$FNUMBER(tCnt,",")," Records Per Second: ",$FNUMBER(tCnt/($zh-tStart),",",2)
		}
	}
	Catch eException
	{
		Set tSC=eException.AsStatus()
	}
   If $Get(pDisableJournaling)=1 Do ENABLE^%NOJRN
	Quit tSC
}

ClassMethod LoadModFromLinkTable(
	pMod As %Integer,
	pDisplay As %Boolean = 0,
	pDisableJournaling As %Boolean = 0) As %Status [ Internal ]
{
	#dim tSC 		As %Status=$$$OK
	#dim eException As %Exception.AbstractException
	#dim tCnt 		As %Integer=0
	#dim tResult 	As %SQL.StatementResult
	Try
	{
		Set tSystem=##class(%SYSTEM.CPU).%New()
       If $Get(pDisableJournaling)=1 Do DISABLE^%NOJRN
		#dim tStart As %String=$ZH
		Set tStart=$ZH
		Set tStatement=##class(%SQL.Statement).%New()
        $$$THROWONERROR(tSC,tStatement.%Prepare("SELECT M.MEME_CK, M.MEMBER_ID, L.ABNORMAL_LAB_TEST_RESULT_CODE, L.ACCESSIONNUMBER, L.ACCTNAME, L.ACCTNUM, L.ADDRESS1, L.ADDRESS2, L.BIRTH_DATE, L.CITY, L.DATE_OF_SERVICE, L.GENDER, L.GRGR_CK, L.GROUP_ID, L.LAB_DATA_SOURCE_CODE, L.LAB_ORDER, L.LAB_TEST_CODE, L.LAB_TEST_DESC, L.LAB_TEST_PANEL_CODE, L.LAB_TEST_PANEL_NAME, L.LAB_TEST_RESULT_2_VALUE, L.LAB_TEST_RESULT_2_VALUE_UOM, L.LAB_TEST_RESULT_COMMENT_TEXT, L.LAB_TEST_RESULT_ID, L.LAB_TEST_RESULT_TEXT_VALUE, L.LAB_TEST_RESULT_VALUE, L.LAB_TEST_RESULT_VALUE_UOM, L.LOCAL_RESULT_CODE, L.LOINC_CODE, L.MEDICAID_ID, L.MEMBER_FIRST_NAME, L.MEMBER_ID, L.MEMBER_LAST_NAME, L.MEMBER_MIDDLE_NAME, L.ORDERING_ACCOUNT, L.ORDERINGACCOUNTNAME, L.ORDERNAME, L.ORDER_NUM, L.PATIENT_ACCOUNT_NBR, L.PAYER_ACCOUNT, L.PAYER_CODE, L.PAYER_NAME, L.PHONE, L.PRINCIPAL_DIAG_CODE, L.PROCEDURE_CODE, L.PRODUCT_ID, L.REFERRING_PROV_ADDR_1, L.REFERRING_PROV_ADDR_2, L.REFERRING_PROV_CITY, L.REFERRING_PROV_GROUP_NAME, L.REFERRING_PROV_GROUP_NBR, L.REFERRING_PROVIDER_NPI, L.REFERRING_PROVIDER_UPIN, L.REFERRING_PROV_NAME, L.REFERRING_PROV_PHONE_NBR, L.REFERRING_PROV_STATE, L.REFERRING_PROV_ZIP_CODE, L.REF_RANGE_DESC, L.REF_RANGE_HIGH_VALUE, L.REF_RANGE_LOW_VALUE, L.RELATIONSHIP_CODE, L.RESULT_NAME,REV_IND, L.SECONDARY_DIAG_01_CODE, L.SECONDARY_DIAG_02_CODE, L.SECONDARY_DIAG_03_CODE, L.SECONDARY_DIAG_04_CODE, L.SOURCE, L.SPECIALTY, L.SPECIMEN_ID, L.SSNUM, L.STATE, L.STG_REC_LOADDATE, L.STG_REC_STATUS, L.VENDOR_BILLING_ID, L.VENDOR_LAB_CODE, L.VENDOR_TEST_RESULT_ID, L.ZIP FROM MVP_EG_ishs.USV_MVP_HEALTHSHARE_MEMBER M INNER JOIN (SELECT * FROM MVP_EG_ishs.USV_MVP_HEALTHSHARE_CLINICAL_LAB_RESULTS) L ON M.MEME_CK = L.MEME_CK WHERE M.MEME_CK IS NOT NULL WHERE   {fn MOD(M.MEME_CK,?)}=?"))
		Set tResult=tStatement.%Execute(tSystem.nCores,pMod)
		FOR  {
			Quit:'tResult.%Next(.tSC)
			If $$$ISERR(tSC) $$$ThrowStatus(tSC)
			If pDisplay,tResult.%ROWCOUNT#10000=0 Write "."
			Set ABNORMALLABTESTRESULTCODE=$zstrip(tResult."ABNORMAL_LAB_TEST_RESULT_CODE","<>CW")
			Set ACCESSIONNUMBER=$zstrip(tResult."ACCESSIONNUMBER","<>CW")
			Set ACCTNAME=$zstrip(tResult."ACCTNAME","<>CW")
			Set ACCTNUM=$zstrip(tResult."ACCTNUM","<>CW")
			Set ADDRESS1=$zstrip(tResult."ADDRESS1","<>CW")
			Set ADDRESS2=$zstrip(tResult."ADDRESS2","<>CW")
			Set BIRTHDATE=$zstrip(tResult."BIRTH_DATE","<>CW")
			Set CITY=$zstrip(tResult."CITY","<>CW")
			Set DATEOFSERVICE=$zstrip(tResult."DATE_OF_SERVICE","<>CW")
			Set GENDER=$zstrip(tResult."GENDER","<>CW")
			Set GRGRCK=$zstrip(tResult."GRGR_CK","<>CW")
			Set GROUPID=$zstrip(tResult."GROUP_ID","<>CW")
			Set LABDATASOURCECODE=$zstrip(tResult."LAB_DATA_SOURCE_CODE","<>CW")
			Set LABORDER=$zstrip(tResult."LAB_ORDER","<>CW")
			Set LABTESTCODE=$zstrip(tResult."LAB_TEST_CODE","<>CW")
			Set LABTESTDESC=$zstrip(tResult."LAB_TEST_DESC","<>CW")
			Set LABTESTPANELCODE=$zstrip(tResult."LAB_TEST_PANEL_CODE","<>CW")
			Set LABTESTPANELNAME=$zstrip(tResult."LAB_TEST_PANEL_NAME","<>CW")
			Set LABTESTRESULT2VALUE=$zstrip(tResult."LAB_TEST_RESULT_2_VALUE","<>CW")
			Set LABTESTRESULT2VALUEUOM=$zstrip(tResult."LAB_TEST_RESULT_2_VALUE_UOM","<>CW")
			Set LABTESTRESULTCOMMENTTEXT=$zstrip(tResult."LAB_TEST_RESULT_COMMENT_TEXT","<>CW")
			Set LABTESTRESULTID=$zstrip(tResult."LAB_TEST_RESULT_ID","<>CW")
			Set LABTESTRESULTTEXTVALUE=$zstrip(tResult."LAB_TEST_RESULT_TEXT_VALUE","<>CW")
			Set LABTESTRESULTVALUE=$zstrip(tResult."LAB_TEST_RESULT_VALUE","<>CW")
			Set LABTESTRESULTVALUEUOM=$zstrip(tResult."LAB_TEST_RESULT_VALUE_UOM","<>CW")
			Set LOCALRESULTCODE=$zstrip(tResult."LOCAL_RESULT_CODE","<>CW")
			Set LOINCCODE=$zstrip(tResult."LOINC_CODE","<>CW")
			Set MEDICAIDID=$zstrip(tResult."MEDICAID_ID","<>CW")
			Set MEMBERFIRSTNAME=$zstrip(tResult."MEMBER_FIRST_NAME","<>CW")
			Set MEMBERID=$zstrip(tResult."MEMBER_ID","<>CW")
			Set MEMBERLASTNAME=$zstrip(tResult."MEMBER_LAST_NAME","<>CW")
			Set MEMBERMIDDLENAME=$zstrip(tResult."MEMBER_MIDDLE_NAME","<>CW")
			Set MEMECK=$zstrip(tResult."MEME_CK","<>CW")
			Set ORDERINGACCOUNT=$zstrip(tResult."ORDERING_ACCOUNT","<>CW")
			Set ORDERINGACCOUNTNAME=$zstrip(tResult."ORDERINGACCOUNTNAME","<>CW")
			Set ORDERNAME=$zstrip(tResult."ORDERNAME","<>CW")
			Set ORDERNUM=$zstrip(tResult."ORDER_NUM","<>CW")
			Set PATIENTACCOUNTNBR=$zstrip(tResult."PATIENT_ACCOUNT_NBR","<>CW")
			Set PAYERACCOUNT=$zstrip(tResult."PAYER_ACCOUNT","<>CW")
			Set PAYERCODE=$zstrip(tResult."PAYER_CODE","<>CW")
			Set PAYERNAME=$zstrip(tResult."PAYER_NAME","<>CW")
			Set PHONE=$zstrip(tResult."PHONE","<>CW")
			Set PRINCIPALDIAGCODE=$zstrip(tResult."PRINCIPAL_DIAG_CODE","<>CW")
			Set PROCEDURECODE=$zstrip(tResult."PROCEDURE_CODE","<>CW")
			Set PRODUCTID=$zstrip(tResult."PRODUCT_ID","<>CW")
			Set REFERRINGPROVADDR1=$zstrip(tResult."REFERRING_PROV_ADDR_1","<>CW")
			Set REFERRINGPROVADDR2=$zstrip(tResult."REFERRING_PROV_ADDR_2","<>CW")
			Set REFERRINGPROVCITY=$zstrip(tResult."REFERRING_PROV_CITY","<>CW")
			Set REFERRINGPROVGROUPNAME=$zstrip(tResult."REFERRING_PROV_GROUP_NAME","<>CW")
			Set REFERRINGPROVGROUPNBR=$zstrip(tResult."REFERRING_PROV_GROUP_NBR","<>CW")
			Set REFERRINGPROVIDERNPI=$zstrip(tResult."REFERRING_PROVIDER_NPI","<>CW")
			Set REFERRINGPROVIDERUPIN=$zstrip(tResult."REFERRING_PROVIDER_UPIN","<>CW")
			Set REFERRINGPROVNAME=$zstrip(tResult."REFERRING_PROV_NAME","<>CW")
			Set REFERRINGPROVPHONENBR=$zstrip(tResult."REFERRING_PROV_PHONE_NBR","<>CW")
			Set REFERRINGPROVSTATE=$zstrip(tResult."REFERRING_PROV_STATE","<>CW")
			Set REFERRINGPROVZIPCODE=$zstrip(tResult."REFERRING_PROV_ZIP_CODE","<>CW")
			Set REFRANGEDESC=$zstrip(tResult."REF_RANGE_DESC","<>CW")
			Set REFRANGEHIGHVALUE=$zstrip(tResult."REF_RANGE_HIGH_VALUE","<>CW")
			Set REFRANGELOWVALUE=$zstrip(tResult."REF_RANGE_LOW_VALUE","<>CW")
			Set RELATIONSHIPCODE=$zstrip(tResult."RELATIONSHIP_CODE","<>CW")
			Set RESULTNAME=$zstrip(tResult."RESULT_NAME","<>CW")
			Set REVIND=$zstrip(tResult."REV_IND","<>CW")
			Set SECONDARYDIAG01CODE=$zstrip(tResult."SECONDARY_DIAG_01_CODE","<>CW")
			Set SECONDARYDIAG02CODE=$zstrip(tResult."SECONDARY_DIAG_02_CODE","<>CW")
			Set SECONDARYDIAG03CODE=$zstrip(tResult."SECONDARY_DIAG_03_CODE","<>CW")
			Set SECONDARYDIAG04CODE=$zstrip(tResult."SECONDARY_DIAG_04_CODE","<>CW")
			Set SOURCE=$zstrip(tResult."SOURCE","<>CW")
			Set SPECIALTY=$zstrip(tResult."SPECIALTY","<>CW")
			Set SPECIMENID=$zstrip(tResult."SPECIMEN_ID","<>CW")
			Set SSNUM=$zstrip(tResult."SSNUM","<>CW")
			Set STATE=$zstrip(tResult."STATE","<>CW")
			Set STGRECLOADDATE=$zstrip(tResult."STG_REC_LOADDATE","<>CW")
			Set STGRECSTATUS=$zstrip(tResult."STG_REC_STATUS","<>CW")
			Set VENDORBILLINGID=$zstrip(tResult."VENDOR_BILLING_ID","<>CW")
			Set VENDORLABCODE=$zstrip(tResult."VENDOR_LAB_CODE","<>CW")
			Set VENDORTESTRESULTID=$zstrip(tResult."VENDOR_TEST_RESULT_ID","<>CW")
			Set ZIP=$zstrip(tResult."ZIP","<>CW")
			&SQL(INSERT %NOCHECK %NOINDEX %NOLOCK INTO MVP_EG_ishs_Staging.USVMVPHEALTHSHARECLINICALLABRESULTS
			     (ABNORMAL_LAB_TEST_RESULT_CODE,ACCESSIONNUMBER,ACCTNAME,ACCTNUM,ADDRESS1,ADDRESS2,BIRTH_DATE,CITY,DATE_OF_SERVICE,GENDER,GRGR_CK,GROUP_ID,LAB_DATA_SOURCE_CODE,LAB_ORDER,LAB_TEST_CODE,LAB_TEST_DESC,LAB_TEST_PANEL_CODE,LAB_TEST_PANEL_NAME,LAB_TEST_RESULT_2_VALUE,LAB_TEST_RESULT_2_VALUE_UOM,LAB_TEST_RESULT_COMMENT_TEXT,LAB_TEST_RESULT_ID,LAB_TEST_RESULT_TEXT_VALUE,LAB_TEST_RESULT_VALUE,LAB_TEST_RESULT_VALUE_UOM,LOCAL_RESULT_CODE,LOINC_CODE,MEDICAID_ID,MEMBER_FIRST_NAME,MEMBER_ID,MEMBER_LAST_NAME,MEMBER_MIDDLE_NAME,MEME_CK,ORDERING_ACCOUNT,ORDERINGACCOUNTNAME,ORDERNAME,ORDER_NUM,PATIENT_ACCOUNT_NBR,PAYER_ACCOUNT,PAYER_CODE,PAYER_NAME,PHONE,PRINCIPAL_DIAG_CODE,PROCEDURE_CODE,PRODUCT_ID,REFERRING_PROV_ADDR_1,REFERRING_PROV_ADDR_2,REFERRING_PROV_CITY,REFERRING_PROV_GROUP_NAME,REFERRING_PROV_GROUP_NBR,REFERRING_PROVIDER_NPI,REFERRING_PROVIDER_UPIN,REFERRING_PROV_NAME,REFERRING_PROV_PHONE_NBR,REFERRING_PROV_STATE,REFERRING_PROV_ZIP_CODE,REF_RANGE_DESC,REF_RANGE_HIGH_VALUE,REF_RANGE_LOW_VALUE,RELATIONSHIP_CODE,RESULT_NAME,REV_IND,SECONDARY_DIAG_01_CODE,SECONDARY_DIAG_02_CODE,SECONDARY_DIAG_03_CODE,SECONDARY_DIAG_04_CODE,SOURCE,SPECIALTY,SPECIMEN_ID,SSNUM,STATE,STG_REC_LOADDATE,STG_REC_STATUS,VENDOR_BILLING_ID,VENDOR_LAB_CODE,VENDOR_TEST_RESULT_ID,ZIP) VALUES (:ABNORMALLABTESTRESULTCODE,:ACCESSIONNUMBER,:ACCTNAME,:ACCTNUM,:ADDRESS1,:ADDRESS2,:BIRTHDATE,:CITY,:DATEOFSERVICE,:GENDER,:GRGRCK,:GROUPID,:LABDATASOURCECODE,:LABORDER,:LABTESTCODE,:LABTESTDESC,:LABTESTPANELCODE,:LABTESTPANELNAME,:LABTESTRESULT2VALUE,:LABTESTRESULT2VALUEUOM,:LABTESTRESULTCOMMENTTEXT,:LABTESTRESULTID,:LABTESTRESULTTEXTVALUE,:LABTESTRESULTVALUE,:LABTESTRESULTVALUEUOM,:LOCALRESULTCODE,:LOINCCODE,:MEDICAIDID,:MEMBERFIRSTNAME,:MEMBERID,:MEMBERLASTNAME,:MEMBERMIDDLENAME,:MEMECK,:ORDERINGACCOUNT,:ORDERINGACCOUNTNAME,:ORDERNAME,:ORDERNUM,:PATIENTACCOUNTNBR,:PAYERACCOUNT,:PAYERCODE,:PAYERNAME,:PHONE,:PRINCIPALDIAGCODE,:PROCEDURECODE,:PRODUCTID,:REFERRINGPROVADDR1,:REFERRINGPROVADDR2,:REFERRINGPROVCITY,:REFERRINGPROVGROUPNAME,:REFERRINGPROVGROUPNBR,:REFERRINGPROVIDERNPI,:REFERRINGPROVIDERUPIN,:REFERRINGPROVNAME,:REFERRINGPROVPHONENBR,:REFERRINGPROVSTATE,:REFERRINGPROVZIPCODE,:REFRANGEDESC,:REFRANGEHIGHVALUE,:REFRANGELOWVALUE,:RELATIONSHIPCODE,:RESULTNAME,:REVIND,:SECONDARYDIAG01CODE,:SECONDARYDIAG02CODE,:SECONDARYDIAG03CODE,:SECONDARYDIAG04CODE,:SOURCE,:SPECIALTY,:SPECIMENID,:SSNUM,:STATE,:STGRECLOADDATE,:STGRECSTATUS,:VENDORBILLINGID,:VENDORLABCODE,:VENDORTESTRESULTID,:ZIP)
			     )
			If SQLCODE<0 THROW ##class(%Exception.SQL).CreateFromSQLCODE(SQLCODE,$Get(%msg))
			}
		If pDisplay Write !,"Done Processing Job: ",pMod+1," Duration: ",$zh-tStart
		}
	Catch eException
	{
		Set tSC=eException.AsStatus()
	}
       If $Get(pDisableJournaling)=1 Do ENABLE^%NOJRN
	Quit tSC
}

/// Provided a <var>STGRECLOADDATE</var> seed value load the delta records from the Link table into the Staging table.
/// As this parameter is ByRef when this method is complete the value of <var>STGRECLOADDATE</var> will be the last value processed</br>
/// <var>pDisplay</var> is used to output progress every 10,000 records</br>
/// <var>pInit</var> indicates if <method>%KillExtent</method> on the staging table should be peformed.
/// <example>
/// Set tSC=##Class(MVP.EG.ishs.Staging.USVMVPHEALTHSHARECLINICALLABRESULTS).LoadDeltaFromLinkTable(STGRECLOADDATE)
/// </example>
ClassMethod LoadDeltaFromLinkTable(
	ByRef STGRECLOADDATE,
	pDisplay As %Boolean = 0,
	pInit As %Boolean = 0,
	pDisableJournaling As %Boolean = 0) As %Status
{
	#dim tSC 		As %Status=$$$OK
	#dim eException As %Exception.AbstractException
	#dim tStart 	As %TimeStamp=$ZH
	#dim tResult 	As %SQL.StatementResult
	Try
	{
		If $Get(pDisableJournaling)=1 Do DISABLE^%NOJRN
		If pInit $$$THROWONERROR(tSC,..%KillExtent())
		Set tStatement=##class(%SQL.Statement).%New()
        $$$THROWONERROR(tSC,tStatement.%Prepare("SELECT M.MEME_CK, M.MEMBER_ID, L.ABNORMAL_LAB_TEST_RESULT_CODE, L.ACCESSIONNUMBER, L.ACCTNAME, L.ACCTNUM, L.ADDRESS1, L.ADDRESS2, L.BIRTH_DATE, L.CITY, L.DATE_OF_SERVICE, L.GENDER, L.GRGR_CK, L.GROUP_ID, L.LAB_DATA_SOURCE_CODE, L.LAB_ORDER, L.LAB_TEST_CODE, L.LAB_TEST_DESC, L.LAB_TEST_PANEL_CODE, L.LAB_TEST_PANEL_NAME, L.LAB_TEST_RESULT_2_VALUE, L.LAB_TEST_RESULT_2_VALUE_UOM, L.LAB_TEST_RESULT_COMMENT_TEXT, L.LAB_TEST_RESULT_ID, L.LAB_TEST_RESULT_TEXT_VALUE, L.LAB_TEST_RESULT_VALUE, L.LAB_TEST_RESULT_VALUE_UOM, L.LOCAL_RESULT_CODE, L.LOINC_CODE, L.MEDICAID_ID, L.MEMBER_FIRST_NAME, L.MEMBER_ID, L.MEMBER_LAST_NAME, L.MEMBER_MIDDLE_NAME, L.ORDERING_ACCOUNT, L.ORDERINGACCOUNTNAME, L.ORDERNAME, L.ORDER_NUM, L.PATIENT_ACCOUNT_NBR, L.PAYER_ACCOUNT, L.PAYER_CODE, L.PAYER_NAME, L.PHONE, L.PRINCIPAL_DIAG_CODE, L.PROCEDURE_CODE, L.PRODUCT_ID, L.REFERRING_PROV_ADDR_1, L.REFERRING_PROV_ADDR_2, L.REFERRING_PROV_CITY, L.REFERRING_PROV_GROUP_NAME, L.REFERRING_PROV_GROUP_NBR, L.REFERRING_PROVIDER_NPI, L.REFERRING_PROVIDER_UPIN, L.REFERRING_PROV_NAME, L.REFERRING_PROV_PHONE_NBR, L.REFERRING_PROV_STATE, L.REFERRING_PROV_ZIP_CODE, L.REF_RANGE_DESC, L.REF_RANGE_HIGH_VALUE, L.REF_RANGE_LOW_VALUE, L.RELATIONSHIP_CODE, L.RESULT_NAME,REV_IND, L.SECONDARY_DIAG_01_CODE, L.SECONDARY_DIAG_02_CODE, L.SECONDARY_DIAG_03_CODE, L.SECONDARY_DIAG_04_CODE, L.SOURCE, L.SPECIALTY, L.SPECIMEN_ID, L.SSNUM, L.STATE, L.STG_REC_LOADDATE, L.STG_REC_STATUS, L.VENDOR_BILLING_ID, L.VENDOR_LAB_CODE, L.VENDOR_TEST_RESULT_ID, L.ZIP FROM MVP_EG_ishs.USV_MVP_HEALTHSHARE_MEMBER M INNER JOIN (SELECT * FROM MVP_EG_ishs.USV_MVP_HEALTHSHARE_CLINICAL_LAB_RESULTS) L ON M.MEME_CK = L.MEME_CK WHERE L.STG_REC_LOADDATE>=? ORDER BY L.STG_REC_LOADDATE"))
		Set tResult=tStatement.%Execute(STGRECLOADDATE)
		FOR  {
			Quit:'tResult.%Next(.tSC)
			If $$$ISERR(tSC) $$$ThrowStatus(tSC)
			If pDisplay,tResult.%ROWCOUNT#10000=0 Write "."
			Set ABNORMALLABTESTRESULTCODE=$zstrip(tResult."ABNORMAL_LAB_TEST_RESULT_CODE","<>CW")
			Set ACCESSIONNUMBER=$zstrip(tResult."ACCESSIONNUMBER","<>CW")
			Set ACCTNAME=$zstrip(tResult."ACCTNAME","<>CW")
			Set ACCTNUM=$zstrip(tResult."ACCTNUM","<>CW")
			Set ADDRESS1=$zstrip(tResult."ADDRESS1","<>CW")
			Set ADDRESS2=$zstrip(tResult."ADDRESS2","<>CW")
			Set BIRTHDATE=$zstrip(tResult."BIRTH_DATE","<>CW")
			Set CITY=$zstrip(tResult."CITY","<>CW")
			Set DATEOFSERVICE=$zstrip(tResult."DATE_OF_SERVICE","<>CW")
			Set GENDER=$zstrip(tResult."GENDER","<>CW")
			Set GRGRCK=$zstrip(tResult."GRGR_CK","<>CW")
			Set GROUPID=$zstrip(tResult."GROUP_ID","<>CW")
			Set LABDATASOURCECODE=$zstrip(tResult."LAB_DATA_SOURCE_CODE","<>CW")
			Set LABORDER=$zstrip(tResult."LAB_ORDER","<>CW")
			Set LABTESTCODE=$zstrip(tResult."LAB_TEST_CODE","<>CW")
			Set LABTESTDESC=$zstrip(tResult."LAB_TEST_DESC","<>CW")
			Set LABTESTPANELCODE=$zstrip(tResult."LAB_TEST_PANEL_CODE","<>CW")
			Set LABTESTPANELNAME=$zstrip(tResult."LAB_TEST_PANEL_NAME","<>CW")
			Set LABTESTRESULT2VALUE=$zstrip(tResult."LAB_TEST_RESULT_2_VALUE","<>CW")
			Set LABTESTRESULT2VALUEUOM=$zstrip(tResult."LAB_TEST_RESULT_2_VALUE_UOM","<>CW")
			Set LABTESTRESULTCOMMENTTEXT=$zstrip(tResult."LAB_TEST_RESULT_COMMENT_TEXT","<>CW")
			Set LABTESTRESULTID=$zstrip(tResult."LAB_TEST_RESULT_ID","<>CW")
			Set LABTESTRESULTTEXTVALUE=$zstrip(tResult."LAB_TEST_RESULT_TEXT_VALUE","<>CW")
			Set LABTESTRESULTVALUE=$zstrip(tResult."LAB_TEST_RESULT_VALUE","<>CW")
			Set LABTESTRESULTVALUEUOM=$zstrip(tResult."LAB_TEST_RESULT_VALUE_UOM","<>CW")
			Set LOCALRESULTCODE=$zstrip(tResult."LOCAL_RESULT_CODE","<>CW")
			Set LOINCCODE=$zstrip(tResult."LOINC_CODE","<>CW")
			Set MEDICAIDID=$zstrip(tResult."MEDICAID_ID","<>CW")
			Set MEMBERFIRSTNAME=$zstrip(tResult."MEMBER_FIRST_NAME","<>CW")
			Set MEMBERID=$zstrip(tResult."MEMBER_ID","<>CW")
			Set MEMBERLASTNAME=$zstrip(tResult."MEMBER_LAST_NAME","<>CW")
			Set MEMBERMIDDLENAME=$zstrip(tResult."MEMBER_MIDDLE_NAME","<>CW")
			Set MEMECK=$zstrip(tResult."MEME_CK","<>CW")
			Set ORDERINGACCOUNT=$zstrip(tResult."ORDERING_ACCOUNT","<>CW")
			Set ORDERINGACCOUNTNAME=$zstrip(tResult."ORDERINGACCOUNTNAME","<>CW")
			Set ORDERNAME=$zstrip(tResult."ORDERNAME","<>CW")
			Set ORDERNUM=$zstrip(tResult."ORDER_NUM","<>CW")
			Set PATIENTACCOUNTNBR=$zstrip(tResult."PATIENT_ACCOUNT_NBR","<>CW")
			Set PAYERACCOUNT=$zstrip(tResult."PAYER_ACCOUNT","<>CW")
			Set PAYERCODE=$zstrip(tResult."PAYER_CODE","<>CW")
			Set PAYERNAME=$zstrip(tResult."PAYER_NAME","<>CW")
			Set PHONE=$zstrip(tResult."PHONE","<>CW")
			Set PRINCIPALDIAGCODE=$zstrip(tResult."PRINCIPAL_DIAG_CODE","<>CW")
			Set PROCEDURECODE=$zstrip(tResult."PROCEDURE_CODE","<>CW")
			Set PRODUCTID=$zstrip(tResult."PRODUCT_ID","<>CW")
			Set REFERRINGPROVADDR1=$zstrip(tResult."REFERRING_PROV_ADDR_1","<>CW")
			Set REFERRINGPROVADDR2=$zstrip(tResult."REFERRING_PROV_ADDR_2","<>CW")
			Set REFERRINGPROVCITY=$zstrip(tResult."REFERRING_PROV_CITY","<>CW")
			Set REFERRINGPROVGROUPNAME=$zstrip(tResult."REFERRING_PROV_GROUP_NAME","<>CW")
			Set REFERRINGPROVGROUPNBR=$zstrip(tResult."REFERRING_PROV_GROUP_NBR","<>CW")
			Set REFERRINGPROVIDERNPI=$zstrip(tResult."REFERRING_PROVIDER_NPI","<>CW")
			Set REFERRINGPROVIDERUPIN=$zstrip(tResult."REFERRING_PROVIDER_UPIN","<>CW")
			Set REFERRINGPROVNAME=$zstrip(tResult."REFERRING_PROV_NAME","<>CW")
			Set REFERRINGPROVPHONENBR=$zstrip(tResult."REFERRING_PROV_PHONE_NBR","<>CW")
			Set REFERRINGPROVSTATE=$zstrip(tResult."REFERRING_PROV_STATE","<>CW")
			Set REFERRINGPROVZIPCODE=$zstrip(tResult."REFERRING_PROV_ZIP_CODE","<>CW")
			Set REFRANGEDESC=$zstrip(tResult."REF_RANGE_DESC","<>CW")
			Set REFRANGEHIGHVALUE=$zstrip(tResult."REF_RANGE_HIGH_VALUE","<>CW")
			Set REFRANGELOWVALUE=$zstrip(tResult."REF_RANGE_LOW_VALUE","<>CW")
			Set RELATIONSHIPCODE=$zstrip(tResult."RELATIONSHIP_CODE","<>CW")
			Set RESULTNAME=$zstrip(tResult."RESULT_NAME","<>CW")
			Set REVIND=$zstrip(tResult."REV_IND","<>CW")
			Set SECONDARYDIAG01CODE=$zstrip(tResult."SECONDARY_DIAG_01_CODE","<>CW")
			Set SECONDARYDIAG02CODE=$zstrip(tResult."SECONDARY_DIAG_02_CODE","<>CW")
			Set SECONDARYDIAG03CODE=$zstrip(tResult."SECONDARY_DIAG_03_CODE","<>CW")
			Set SECONDARYDIAG04CODE=$zstrip(tResult."SECONDARY_DIAG_04_CODE","<>CW")
			Set SOURCE=$zstrip(tResult."SOURCE","<>CW")
			Set SPECIALTY=$zstrip(tResult."SPECIALTY","<>CW")
			Set SPECIMENID=$zstrip(tResult."SPECIMEN_ID","<>CW")
			Set SSNUM=$zstrip(tResult."SSNUM","<>CW")
			Set STATE=$zstrip(tResult."STATE","<>CW")
			Set STGRECLOADDATE=$zstrip(tResult."STG_REC_LOADDATE","<>CW")
			Set STGRECSTATUS=$zstrip(tResult."STG_REC_STATUS","<>CW")
			Set VENDORBILLINGID=$zstrip(tResult."VENDOR_BILLING_ID","<>CW")
			Set VENDORLABCODE=$zstrip(tResult."VENDOR_LAB_CODE","<>CW")
			Set VENDORTESTRESULTID=$zstrip(tResult."VENDOR_TEST_RESULT_ID","<>CW")
			Set ZIP=$zstrip(tResult."ZIP","<>CW")
			&SQL(INSERT %NOCHECK INTO MVP_EG_ishs_Staging.USVMVPHEALTHSHARECLINICALLABRESULTS
			     (ABNORMAL_LAB_TEST_RESULT_CODE,ACCESSIONNUMBER,ACCTNAME,ACCTNUM,ADDRESS1,ADDRESS2,BIRTH_DATE,CITY,DATE_OF_SERVICE,GENDER,GRGR_CK,GROUP_ID,LAB_DATA_SOURCE_CODE,LAB_ORDER,LAB_TEST_CODE,LAB_TEST_DESC,LAB_TEST_PANEL_CODE,LAB_TEST_PANEL_NAME,LAB_TEST_RESULT_2_VALUE,LAB_TEST_RESULT_2_VALUE_UOM,LAB_TEST_RESULT_COMMENT_TEXT,LAB_TEST_RESULT_ID,LAB_TEST_RESULT_TEXT_VALUE,LAB_TEST_RESULT_VALUE,LAB_TEST_RESULT_VALUE_UOM,LOCAL_RESULT_CODE,LOINC_CODE,MEDICAID_ID,MEMBER_FIRST_NAME,MEMBER_ID,MEMBER_LAST_NAME,MEMBER_MIDDLE_NAME,MEME_CK,ORDERING_ACCOUNT,ORDERINGACCOUNTNAME,ORDERNAME,ORDER_NUM,PATIENT_ACCOUNT_NBR,PAYER_ACCOUNT,PAYER_CODE,PAYER_NAME,PHONE,PRINCIPAL_DIAG_CODE,PROCEDURE_CODE,PRODUCT_ID,REFERRING_PROV_ADDR_1,REFERRING_PROV_ADDR_2,REFERRING_PROV_CITY,REFERRING_PROV_GROUP_NAME,REFERRING_PROV_GROUP_NBR,REFERRING_PROVIDER_NPI,REFERRING_PROVIDER_UPIN,REFERRING_PROV_NAME,REFERRING_PROV_PHONE_NBR,REFERRING_PROV_STATE,REFERRING_PROV_ZIP_CODE,REF_RANGE_DESC,REF_RANGE_HIGH_VALUE,REF_RANGE_LOW_VALUE,RELATIONSHIP_CODE,RESULT_NAME,REV_IND,SECONDARY_DIAG_01_CODE,SECONDARY_DIAG_02_CODE,SECONDARY_DIAG_03_CODE,SECONDARY_DIAG_04_CODE,SOURCE,SPECIALTY,SPECIMEN_ID,SSNUM,STATE,STG_REC_LOADDATE,STG_REC_STATUS,VENDOR_BILLING_ID,VENDOR_LAB_CODE,VENDOR_TEST_RESULT_ID,ZIP) VALUES (:ABNORMALLABTESTRESULTCODE,:ACCESSIONNUMBER,:ACCTNAME,:ACCTNUM,:ADDRESS1,:ADDRESS2,:BIRTHDATE,:CITY,:DATEOFSERVICE,:GENDER,:GRGRCK,:GROUPID,:LABDATASOURCECODE,:LABORDER,:LABTESTCODE,:LABTESTDESC,:LABTESTPANELCODE,:LABTESTPANELNAME,:LABTESTRESULT2VALUE,:LABTESTRESULT2VALUEUOM,:LABTESTRESULTCOMMENTTEXT,:LABTESTRESULTID,:LABTESTRESULTTEXTVALUE,:LABTESTRESULTVALUE,:LABTESTRESULTVALUEUOM,:LOCALRESULTCODE,:LOINCCODE,:MEDICAIDID,:MEMBERFIRSTNAME,:MEMBERID,:MEMBERLASTNAME,:MEMBERMIDDLENAME,:MEMECK,:ORDERINGACCOUNT,:ORDERINGACCOUNTNAME,:ORDERNAME,:ORDERNUM,:PATIENTACCOUNTNBR,:PAYERACCOUNT,:PAYERCODE,:PAYERNAME,:PHONE,:PRINCIPALDIAGCODE,:PROCEDURECODE,:PRODUCTID,:REFERRINGPROVADDR1,:REFERRINGPROVADDR2,:REFERRINGPROVCITY,:REFERRINGPROVGROUPNAME,:REFERRINGPROVGROUPNBR,:REFERRINGPROVIDERNPI,:REFERRINGPROVIDERUPIN,:REFERRINGPROVNAME,:REFERRINGPROVPHONENBR,:REFERRINGPROVSTATE,:REFERRINGPROVZIPCODE,:REFRANGEDESC,:REFRANGEHIGHVALUE,:REFRANGELOWVALUE,:RELATIONSHIPCODE,:RESULTNAME,:REVIND,:SECONDARYDIAG01CODE,:SECONDARYDIAG02CODE,:SECONDARYDIAG03CODE,:SECONDARYDIAG04CODE,:SOURCE,:SPECIALTY,:SPECIMENID,:SSNUM,:STATE,:STGRECLOADDATE,:STGRECSTATUS,:VENDORBILLINGID,:VENDORLABCODE,:VENDORTESTRESULTID,:ZIP)
			     )
			If SQLCODE<0 THROW ##class(%Exception.SQL).CreateFromSQLCODE(SQLCODE,$Get(%msg))
		}
		If pDisplay Write !,"Duration: ",$zh-tStart," Processed: ",tResult.%ROWCOUNT,!
	}
	Catch eException
	{
		Set tSC=eException.AsStatus()
	}
   If $Get(pDisableJournaling)=1 Do ENABLE^%NOJRN
	Quit tSC
}

/// Revision number of this class
Parameter SrcVer = 4;

Storage Default
{
<Data name="USVMVPHEALTHSHARECLINICALLABRESULTSDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>ABNORMALLABTESTRESULTCODE</Value>
</Value>
<Value name="3">
<Value>ACCESSIONNUMBER</Value>
</Value>
<Value name="4">
<Value>ACCTNAME</Value>
</Value>
<Value name="5">
<Value>ACCTNUM</Value>
</Value>
<Value name="6">
<Value>ADDRESS1</Value>
</Value>
<Value name="7">
<Value>ADDRESS2</Value>
</Value>
<Value name="8">
<Value>BIRTHDATE</Value>
</Value>
<Value name="9">
<Value>CITY</Value>
</Value>
<Value name="10">
<Value>DATEOFSERVICE</Value>
</Value>
<Value name="11">
<Value>GENDER</Value>
</Value>
<Value name="12">
<Value>GRGRCK</Value>
</Value>
<Value name="13">
<Value>GROUPID</Value>
</Value>
<Value name="14">
<Value>LABDATASOURCECODE</Value>
</Value>
<Value name="15">
<Value>LABORDER</Value>
</Value>
<Value name="16">
<Value>LABTESTCODE</Value>
</Value>
<Value name="17">
<Value>LABTESTDESC</Value>
</Value>
<Value name="18">
<Value>LABTESTPANELCODE</Value>
</Value>
<Value name="19">
<Value>LABTESTPANELNAME</Value>
</Value>
<Value name="20">
<Value>LABTESTRESULT2VALUE</Value>
</Value>
<Value name="21">
<Value>LABTESTRESULT2VALUEUOM</Value>
</Value>
<Value name="22">
<Value>LABTESTRESULTCOMMENTTEXT</Value>
</Value>
<Value name="23">
<Value>LABTESTRESULTID</Value>
</Value>
<Value name="24">
<Value>LABTESTRESULTTEXTVALUE</Value>
</Value>
<Value name="25">
<Value>LABTESTRESULTVALUE</Value>
</Value>
<Value name="26">
<Value>LABTESTRESULTVALUEUOM</Value>
</Value>
<Value name="27">
<Value>LOCALRESULTCODE</Value>
</Value>
<Value name="28">
<Value>LOINCCODE</Value>
</Value>
<Value name="29">
<Value>MEDICAIDID</Value>
</Value>
<Value name="30">
<Value>MEMBERFIRSTNAME</Value>
</Value>
<Value name="31">
<Value>MEMBERID</Value>
</Value>
<Value name="32">
<Value>MEMBERLASTNAME</Value>
</Value>
<Value name="33">
<Value>MEMBERMIDDLENAME</Value>
</Value>
<Value name="34">
<Value>MEMECK</Value>
</Value>
<Value name="35">
<Value>ORDERINGACCOUNT</Value>
</Value>
<Value name="36">
<Value>ORDERINGACCOUNTNAME</Value>
</Value>
<Value name="37">
<Value>ORDERNAME</Value>
</Value>
<Value name="38">
<Value>ORDERNUM</Value>
</Value>
<Value name="39">
<Value>PATIENTACCOUNTNBR</Value>
</Value>
<Value name="40">
<Value>PAYERACCOUNT</Value>
</Value>
<Value name="41">
<Value>PAYERCODE</Value>
</Value>
<Value name="42">
<Value>PAYERNAME</Value>
</Value>
<Value name="43">
<Value>PHONE</Value>
</Value>
<Value name="44">
<Value>PRINCIPALDIAGCODE</Value>
</Value>
<Value name="45">
<Value>PROCEDURECODE</Value>
</Value>
<Value name="46">
<Value>PRODUCTID</Value>
</Value>
<Value name="47">
<Value>REFERRINGPROVADDR1</Value>
</Value>
<Value name="48">
<Value>REFERRINGPROVADDR2</Value>
</Value>
<Value name="49">
<Value>REFERRINGPROVCITY</Value>
</Value>
<Value name="50">
<Value>REFERRINGPROVGROUPNAME</Value>
</Value>
<Value name="51">
<Value>REFERRINGPROVGROUPNBR</Value>
</Value>
<Value name="52">
<Value>REFERRINGPROVIDERNPI</Value>
</Value>
<Value name="53">
<Value>REFERRINGPROVIDERUPIN</Value>
</Value>
<Value name="54">
<Value>REFERRINGPROVNAME</Value>
</Value>
<Value name="55">
<Value>REFERRINGPROVPHONENBR</Value>
</Value>
<Value name="56">
<Value>REFERRINGPROVSTATE</Value>
</Value>
<Value name="57">
<Value>REFERRINGPROVZIPCODE</Value>
</Value>
<Value name="58">
<Value>REFRANGEDESC</Value>
</Value>
<Value name="59">
<Value>REFRANGEHIGHVALUE</Value>
</Value>
<Value name="60">
<Value>REFRANGELOWVALUE</Value>
</Value>
<Value name="61">
<Value>RELATIONSHIPCODE</Value>
</Value>
<Value name="62">
<Value>RESULTNAME</Value>
</Value>
<Value name="63">
<Value>REVIND</Value>
</Value>
<Value name="64">
<Value>SECONDARYDIAG01CODE</Value>
</Value>
<Value name="65">
<Value>SECONDARYDIAG02CODE</Value>
</Value>
<Value name="66">
<Value>SECONDARYDIAG03CODE</Value>
</Value>
<Value name="67">
<Value>SECONDARYDIAG04CODE</Value>
</Value>
<Value name="68">
<Value>SOURCE</Value>
</Value>
<Value name="69">
<Value>SPECIALTY</Value>
</Value>
<Value name="70">
<Value>SPECIMENID</Value>
</Value>
<Value name="71">
<Value>SSNUM</Value>
</Value>
<Value name="72">
<Value>STATE</Value>
</Value>
<Value name="73">
<Value>STGRECLOADDATE</Value>
</Value>
<Value name="74">
<Value>STGRECSTATUS</Value>
</Value>
<Value name="75">
<Value>VENDORBILLINGID</Value>
</Value>
<Value name="76">
<Value>VENDORLABCODE</Value>
</Value>
<Value name="77">
<Value>VENDORTESTRESULTID</Value>
</Value>
<Value name="78">
<Value>ZIP</Value>
</Value>
</Data>
<DataLocation>^MVP.EG.ishBDFF.USVMVPHEALT7CAED</DataLocation>
<DefaultData>USVMVPHEALTHSHARECLINICALLABRESULTSDefaultData</DefaultData>
<IdLocation>^MVP.EG.ishBDFF.USVMVPHEALT7CAED</IdLocation>
<IndexLocation>^MVP.EG.ishBDFF.USVMVPHEALT7CAEI</IndexLocation>
<StreamLocation>^MVP.EG.ishBDFF.USVMVPHEALT7CAES</StreamLocation>
<Type>%Storage.Persistent</Type>
}

}
